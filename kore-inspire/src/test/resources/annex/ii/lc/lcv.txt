Container <<applicationSchema>> "LandCoverVector" {
  * fileName = "LandCoverVector"
  Attributes <<featureType>> "LCV_LandCoverDataset" {
    * description = "A vector representation for Land Cover data.
  
    This representation allows Land Cover data being supported by a vector geometry."
    * identifier = "LandCoverVector::LandCoverDataset"
    * tableName = "LCV_LandCoverDataset"
    extent_description TEXT
    id INTEGER NOT NULL PRIMARY KEY
    name TEXT NOT NULL
    <<voidable>>, <<lifeCycleInfo>> beginLifespanVersion DATETIME
    <<voidable>>, <<lifeCycleInfo>> endLifespanVersion DATETIME
    <<reference>> inspireId INTEGER
    <<reference>> nomenclatureDocumentation INTEGER
    <<voidable>> validFrom DATE
    <<voidable>> validTo DATE
  }
  Attributes <<dataType>> "LCV_LandCoverObservation" {
    * description = "Land Cover information interpreted at a specific time and place."
    * identifier = "LandCoverVector::LandCoverObservation"
    * tableName = "LCV_LandCoverObservation"
    class TEXT NOT NULL CHECK(LCN_LandCoverClassValue)
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>> observationDate DATETIME
  }
  Attributes <<dataType>> "LCV_LandCoverValue" {
    * description = "Generic class supporting Land Cover value and percentage."
    * identifier = "LandCoverVector::LandCoverValue"
    * tableName = "LCV_LandCoverValue"
    class TEXT NOT NULL CHECK(LCN_LandCoverClassValue)
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>> coveredPercentage INTEGER
  }
  Feature <<featureType>> "LCV_LandCoverUnit" {
    * description = "An individual element of the LC dataset represented by  a point or polygon.
  
    Every unit support Land Cover information."
    * identifier = "LandCoverVector::LandCoverUnit"
    * tableName = "LCV_LandCoverUnit"
    geometry GEOMETRY NOT NULL
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<lifeCycleInfo>> beginLifespanVersion DATETIME
    <<voidable>>, <<lifeCycleInfo>> endLifespanVersion DATETIME
    <<reference>> inspireId INTEGER
  }
  Relation "LCV_null_member" {
    * profile = "features"
    * relatedReference = "attribute LCV_LandCoverUnit#null"
    * tableName = "LCV_null_member"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES LCV_LandCoverDataset(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES LCV_LandCoverUnit(id)
  }
  Relation "LCV_LandCoverDataset_inspireId" {
    * profile = "attributes"
    * relatedReference = "attribute LCV_LandCoverDataset#inspireId"
    * tableName = "LCV_LandCoverDataset_inspireId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES LCV_LandCoverDataset(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "LCV_LandCoverDataset_nomenclatureDocumentation" {
    * profile = "attributes"
    * relatedReference = "attribute LCV_LandCoverDataset#nomenclatureDocumentation"
    * tableName = "LCV_LandCoverDataset_nomenclatureDocumentation"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES LCV_LandCoverDataset(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES LCN_LandCoverNomenclature(id)
  }
  Relation "LCV_LandCoverObservation_mosaic" {
    * profile = "attributes"
    * tableName = "LCV_LandCoverObservation_mosaic"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES LCV_LandCoverObservation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES LCV_LandCoverValue(id)
  }
  Relation "LCV_LandCoverUnit_inspireId" {
    * profile = "attributes"
    * relatedReference = "attribute LCV_LandCoverUnit#inspireId"
    * tableName = "LCV_LandCoverUnit_inspireId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES LCV_LandCoverUnit(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "LCV_LandCoverUnit_landCoverObservation" {
    * profile = "attributes"
    * tableName = "LCV_LandCoverUnit_landCoverObservation"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES LCV_LandCoverUnit(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES LCV_LandCoverObservation(id)
  }
}
Container <<applicationSchema>> "Base Types 2" {
  * fileName = "Base Types 2"
  Attributes <<dataType>> "BASE2_Contact" {
    * description = "Communication channels by which it is possible to gain access to someone or something."
    * identifier = "Base Types 2::Contact"
    * tableName = "BASE2_Contact"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<reference>> address INTEGER
    <<voidable>>, <<array>> telephoneFacsimiles TEXT
    <<voidable>>, <<array>> telephoneVoices TEXT
    <<voidable>> electronicMailAddress TEXT
    <<voidable>> website TEXT
  }
  Constraint Enum <<codeList>> "BASE2_PartyRoleValue" {
    * identifier = "Base Types 2::PartyRoleValue"
  }
  Attributes <<dataType>> "BASE2_RelatedParty" {
    * description = "An organisation or a person with a role related to a resource.
  
    NOTE 1 A party, typically an individual person, acting as a general point of contact for a resource can be specified without providing any particular role."
    * identifier = "Base Types 2::RelatedParty"
    * tableName = "BASE2_RelatedParty"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<reference>> contact INTEGER
    <<voidable>>, <<array>> roles TEXT
  }
  Constraint Enum <<enumeration>> "BASE2_SimpleCitationType" {
    CI_Citation
    DocumentCitation
    LegislationCitation
  }
  Attributes <<dataType>> "BASE2_SimpleCitation" {
    * tableName = "BASE2_SimpleCitation"
    date DATE
    id INTEGER NOT NULL PRIMARY KEY
    level LegislationLevelValue
    link TEXT
    name TEXT NOT NULL
    type TEXT NOT NULL CHECK(BASE2_SimpleCitationType)
  }
  Attributes <<dataType>> "BASE2_SimpleGeographicalName" {
    * tableName = "BASE2_SimpleGeographicalName"
    id INTEGER NOT NULL PRIMARY KEY
    language TEXT
    spelling_text TEXT NOT NULL
  }
  Relation "BASE2_RelatedParty_contact" {
    * profile = "attributes"
    * relatedReference = "attribute BASE2_RelatedParty#contact"
    * tableName = "BASE2_RelatedParty_contact"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_RelatedParty(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_Contact(id)
  }
  Relation "BASE2_Contact_address" {
    * profile = "attributes"
    * relatedReference = "attribute BASE2_Contact#address"
    * tableName = "BASE2_Contact_address"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_Contact(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES AD_AddressRepresentation(id)
  }
}
Container <<applicationSchema>> "LandCoverNomenclature" {
  * fileName = "LandCoverNomenclature"
  Constraint Enum <<codeList>> "LCN_LandCoverClassValue" {
    * identifier = "LandCoverNomenclature::LandCoverClassValue"
  }
  Attributes <<dataType>> "LCN_LandCoverNomenclature" {
    * description = "Information about reference national, institutional or local Land Cover nomenclature.
  
    Land Cover Nomenclature allows to reference nomenclatures documentation and associated code list, and to define them through an external reference or included within the data according 19144-2."
    * identifier = "LandCoverNomenclature::LandCoverNomenclature"
    * tableName = "LCN_LandCoverNomenclature"
    id INTEGER NOT NULL PRIMARY KEY
    nomenclatureCodeList TEXT NOT NULL
    <<reference>> inspireId INTEGER
    <<reference>> responsibleParty INTEGER
    observation LandCoverObservation [1..*] as ref
  }
  Relation "LCN_LandCoverNomenclature_inspireId" {
    * profile = "attributes"
    * relatedReference = "attribute LCN_LandCoverNomenclature#inspireId"
    * tableName = "LCN_LandCoverNomenclature_inspireId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES LCN_LandCoverNomenclature(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "LCN_LandCoverNomenclature_externalDescription" {
    * profile = "attributes"
    * tableName = "LCN_LandCoverNomenclature_externalDescription"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES LCN_LandCoverNomenclature(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleCitation(id)
  }
  Relation "LCN_LandCoverNomenclature_responsibleParty" {
    * profile = "attributes"
    * relatedReference = "attribute LCN_LandCoverNomenclature#responsibleParty"
    * tableName = "LCN_LandCoverNomenclature_responsibleParty"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES LCN_LandCoverNomenclature(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_RelatedParty(id)
  }
}
Container <<applicationSchema>> "Addresses" {
  * fileName = "Addresses"
  Attributes <<dataType>> "AD_AddressRepresentation" {
    * description = "Representation of an address spatial object for use in external application schemas that need to include the basic, address information in a readable way.
  
    NOTE 1 The data type includes the all necessary readable address components as well as the address locator(s), which allows the identification of the address spatial objects, e.g., country, region, municipality, address area, post code, street name and address number. It also includes an optional reference to the full address spatial object.
  
    NOTE 2 The datatype could be used in application schemas that wish to include address information e.g. in a dataset that registers buildings or properties."
    * identifier = "Addresses::AddressRepresentation"
    * tableName = "AD_AddressRepresentation"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<reference>> addressFeature_Address INTEGER
    <<array>> locatorDesignators TEXT
    <<voidable>> postCode TEXT
  }
  Relation "AD_AddressRepresentation_adminUnit" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_adminUnit"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_locatorName" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_locatorName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_addressArea" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_addressArea"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_postName" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_postName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_thoroughfare" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_thoroughfare"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_addressFeature_Address" {
    * profile = "attributes"
    * relatedReference = "attribute AD_AddressRepresentation#addressFeature_Address"
    * tableName = "AD_AddressRepresentation_addressFeature_Address"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
}
Container <<applicationSchema>> "Base Types" {
  * fileName = "Base Types"
  Attributes <<dataType>> "BASE_Identifier" {
    * description = "External unique object identifier published by the responsible body, which may be used by external applications to reference the spatial object.
  
    NOTE1 External object identifiers are distinct from thematic object identifiers.
  
    NOTE 2 The voidable version identifier attribute is not part of the unique identifier of a spatial object and may be used to distinguish two versions of the same spatial object.
  
    NOTE 3 The unique identifier will not change during the life-time of a spatial object."
    * identifier = "Base Types::Identifier"
    * tableName = "BASE_Identifier"
    id INTEGER NOT NULL PRIMARY KEY
    localId TEXT NOT NULL
    namespace TEXT NOT NULL
    <<lifeCycleInfo>>, <<voidable>> versionId TEXT
  }
  Metadata "Unknown" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unknown"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Unpopulated" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unpopulated"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
}
Package "EA Model" {
  Class "applicationSchema" {}
  Datatype LegislationLevelValue
  
}

