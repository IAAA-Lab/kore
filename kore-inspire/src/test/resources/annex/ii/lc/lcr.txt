Container <<applicationSchema>> "LandCoverRaster" {
  * fileName = "LandCoverRaster"
  Attributes <<featureType>> "LCR_LandCoverGridCoverage" {
    * description = "A raster representation for Land Cover data.
  
    This representation allows Land Cover data being supported by rectified grid coverage (ISO 19123)."
    * identifier = "LandCoverRaster::LandCoverGridCoverage"
    * tableName = "LCR_LandCoverGridCoverage"
    coverageFunction_ruleDefinition TEXT
    coverageFunction_ruleReference TEXT
    extent_description TEXT
    id INTEGER NOT NULL PRIMARY KEY
    name TEXT NOT NULL
    <<voidable>>, <<lifeCycleInfo>> beginLifespanVersion DATETIME
    <<voidable>>, <<lifeCycleInfo>> endLifespanVersion DATETIME
    <<reference>> inspireId INTEGER
    <<reference>> nomenclatureDocumentation INTEGER
    <<voidable>> validFrom DATE
    <<voidable>> validTo DATE
    coverageFunction_gridFunction GMLCOV_GridFunction [0..1] as ref
    domainSet _Any as ref
    metadata _Any [0..*] as ref
    rangeSet _Any [0..*] as ref
    rangeType _RecordType as ref
  }
  Relation "LCR_LandCoverGridCoverage_inspireId" {
    * profile = "attributes"
    * relatedReference = "attribute LCR_LandCoverGridCoverage#inspireId"
    * tableName = "LCR_LandCoverGridCoverage_inspireId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES LCR_LandCoverGridCoverage(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "LCR_LandCoverGridCoverage_nomenclatureDocumentation" {
    * profile = "attributes"
    * relatedReference = "attribute LCR_LandCoverGridCoverage#nomenclatureDocumentation"
    * tableName = "LCR_LandCoverGridCoverage_nomenclatureDocumentation"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES LCR_LandCoverGridCoverage(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES LCN_LandCoverNomenclature(id)
  }
}
Container <<applicationSchema>> "Base Types 2" {
  * fileName = "Base Types 2"
  Attributes <<dataType>> "BASE2_Contact" {
    * description = "Communication channels by which it is possible to gain access to someone or something."
    * identifier = "Base Types 2::Contact"
    * tableName = "BASE2_Contact"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<reference>> address INTEGER
    <<voidable>>, <<array>> telephoneFacsimiles TEXT
    <<voidable>>, <<array>> telephoneVoices TEXT
    <<voidable>> electronicMailAddress TEXT
    <<voidable>> website TEXT
  }
  Constraint Enum <<codeList>> "BASE2_PartyRoleValue" {
    * identifier = "Base Types 2::PartyRoleValue"
  }
  Attributes <<dataType>> "BASE2_RelatedParty" {
    * description = "An organisation or a person with a role related to a resource.
  
    NOTE 1 A party, typically an individual person, acting as a general point of contact for a resource can be specified without providing any particular role."
    * identifier = "Base Types 2::RelatedParty"
    * tableName = "BASE2_RelatedParty"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<reference>> contact INTEGER
    <<voidable>>, <<array>> roles TEXT
  }
  Constraint Enum <<enumeration>> "BASE2_SimpleCitationType" {
    CI_Citation
    DocumentCitation
    LegislationCitation
  }
  Attributes <<dataType>> "BASE2_SimpleCitation" {
    * tableName = "BASE2_SimpleCitation"
    date DATE
    id INTEGER NOT NULL PRIMARY KEY
    level LegislationLevelValue
    link TEXT
    name TEXT NOT NULL
    type TEXT NOT NULL CHECK(BASE2_SimpleCitationType)
  }
  Attributes <<dataType>> "BASE2_SimpleGeographicalName" {
    * tableName = "BASE2_SimpleGeographicalName"
    id INTEGER NOT NULL PRIMARY KEY
    language TEXT
    spelling_text TEXT NOT NULL
  }
  Constraint Enum <<codeList>> "BASE2_Locale" {}
  Attributes <<type>> "BASE2_SimpleLocalisedCharacterString" {
    * tableName = "BASE2_SimpleLocalisedCharacterString"
    id INTEGER NOT NULL PRIMARY KEY
    locale TEXT NOT NULL CHECK(BASE2_Locale)
    value TEXT NOT NULL
  }
  Relation "BASE2_RelatedParty_individualName" {
    * profile = "attributes"
    * tableName = "BASE2_RelatedParty_individualName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_RelatedParty(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleLocalisedCharacterString(id)
  }
  Relation "BASE2_RelatedParty_organisationName" {
    * profile = "attributes"
    * tableName = "BASE2_RelatedParty_organisationName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_RelatedParty(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleLocalisedCharacterString(id)
  }
  Relation "BASE2_RelatedParty_positionName" {
    * profile = "attributes"
    * tableName = "BASE2_RelatedParty_positionName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_RelatedParty(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleLocalisedCharacterString(id)
  }
  Relation "BASE2_RelatedParty_contact" {
    * profile = "attributes"
    * relatedReference = "attribute BASE2_RelatedParty#contact"
    * tableName = "BASE2_RelatedParty_contact"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_RelatedParty(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_Contact(id)
  }
  Relation "BASE2_Contact_address" {
    * profile = "attributes"
    * relatedReference = "attribute BASE2_Contact#address"
    * tableName = "BASE2_Contact_address"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_Contact(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES AD_AddressRepresentation(id)
  }
  Relation "BASE2_Contact_contactInstructions" {
    * profile = "attributes"
    * tableName = "BASE2_Contact_contactInstructions"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_Contact(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleLocalisedCharacterString(id)
  }
  Relation "BASE2_Contact_hoursOfService" {
    * profile = "attributes"
    * tableName = "BASE2_Contact_hoursOfService"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_Contact(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleLocalisedCharacterString(id)
  }
}
Container "Quadrilateral Grid" {
  * fileName = "Quadrilateral Grid"
  Constraint Enum <<codeList>> "CIS_CV_SequenceType" {
    * identifier = "Quadrilateral Grid::CV_SequenceType"
    CantorDiagonal
    Hilbert
    Morton
    boustrophedonic
    linear
    spiral
  }
}
Container <<applicationSchema>> "LandCoverNomenclature" {
  * fileName = "LandCoverNomenclature"
  Attributes <<dataType>> "LCN_LandCoverNomenclature" {
    * description = "Information about reference national, institutional or local Land Cover nomenclature.
  
    Land Cover Nomenclature allows to reference nomenclatures documentation and associated code list, and to define them through an external reference or included within the data according 19144-2."
    * identifier = "LandCoverNomenclature::LandCoverNomenclature"
    * tableName = "LCN_LandCoverNomenclature"
    id INTEGER NOT NULL PRIMARY KEY
    nomenclatureCodeList TEXT NOT NULL
    <<reference>> inspireId INTEGER
    <<reference>> responsibleParty INTEGER
    observation LandCoverObservation [1..*] as ref
  }
  Relation "LCN_LandCoverNomenclature_inspireId" {
    * profile = "attributes"
    * relatedReference = "attribute LCN_LandCoverNomenclature#inspireId"
    * tableName = "LCN_LandCoverNomenclature_inspireId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES LCN_LandCoverNomenclature(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "LCN_LandCoverNomenclature_externalDescription" {
    * profile = "attributes"
    * tableName = "LCN_LandCoverNomenclature_externalDescription"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES LCN_LandCoverNomenclature(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleCitation(id)
  }
  Relation "LCN_LandCoverNomenclature_responsibleParty" {
    * profile = "attributes"
    * relatedReference = "attribute LCN_LandCoverNomenclature#responsibleParty"
    * tableName = "LCN_LandCoverNomenclature_responsibleParty"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES LCN_LandCoverNomenclature(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_RelatedParty(id)
  }
}
Container "Records and Class Metadata" {
  * fileName = "Records and Class Metadata"
  Attributes <<type>>, <<type>> "_Any" {
    * description = "<UsedBy>
  
    <NameSpace>ISO 19103 Conceptual Schema Language</NameSpace>
  
    <Class>Record</Class>
  
    <Package>Records and Class Metadata</Package>
  
    <Operation>locate</Operation>
  
    <Parameter>Return</Parameter>
  
    <Type>Any</Type>
  
    <UsedBy>"
    * identifier = "Records and Class Metadata::Any"
    * tableName = "_Any"
    id INTEGER NOT NULL PRIMARY KEY
  }
  Attributes <<type>>, <<type>> "_Type" {
    * description = "Type is used here for as a generic concept for any metalanguage description of an object class."
    * identifier = "Records and Class Metadata::Type"
    * tableName = "_Type"
    id INTEGER NOT NULL PRIMARY KEY
    typeName_aName TEXT NOT NULL
    schema Schema [0..*] as ref
  }
  Attributes <<type>>, <<type>> "_RecordType" {
    * description = "A RecordType is a look up mechanism that associates AttributeNames to TypeNames. AttributeNames are locally mapped. TypeNames are most often either primitives, or other types in the same schema as this record. Because the RecordType can control the structure of a set of Records, it is essentially a metaclass for that set of records view as a class.
  
    A RecordType is a NameSpace for its included attributeTypes."
    * identifier = "Records and Class Metadata::RecordType"
    * tableName = "_RecordType"
    id INTEGER NOT NULL PRIMARY KEY
    typeName_aName TEXT NOT NULL
    <<reference>> memberType INTEGER
    record Record [0..*] as ref
    schema Schema [0..*] as ref
  }
  Relation "_RecordType_memberType" {
    * profile = "attributes"
    * relatedReference = "attribute _RecordType#memberType"
    * tableName = "_RecordType_memberType"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES _RecordType(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES _Type(id)
  }
}
Container <<applicationSchema>> "Addresses" {
  * fileName = "Addresses"
  Attributes <<dataType>> "AD_AddressRepresentation" {
    * description = "Representation of an address spatial object for use in external application schemas that need to include the basic, address information in a readable way.
  
    NOTE 1 The data type includes the all necessary readable address components as well as the address locator(s), which allows the identification of the address spatial objects, e.g., country, region, municipality, address area, post code, street name and address number. It also includes an optional reference to the full address spatial object.
  
    NOTE 2 The datatype could be used in application schemas that wish to include address information e.g. in a dataset that registers buildings or properties."
    * identifier = "Addresses::AddressRepresentation"
    * tableName = "AD_AddressRepresentation"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<reference>> addressFeature_Address INTEGER
    <<array>> locatorDesignators TEXT
    <<voidable>> postCode TEXT
  }
  Relation "AD_AddressRepresentation_adminUnit" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_adminUnit"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_locatorName" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_locatorName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_addressArea" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_addressArea"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_postName" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_postName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_thoroughfare" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_thoroughfare"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_addressFeature_Address" {
    * profile = "attributes"
    * relatedReference = "attribute AD_AddressRepresentation#addressFeature_Address"
    * tableName = "AD_AddressRepresentation_addressFeature_Address"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
}
Container <<applicationSchema>> "Base Types" {
  * fileName = "Base Types"
  Attributes <<dataType>> "BASE_Identifier" {
    * description = "External unique object identifier published by the responsible body, which may be used by external applications to reference the spatial object.
  
    NOTE1 External object identifiers are distinct from thematic object identifiers.
  
    NOTE 2 The voidable version identifier attribute is not part of the unique identifier of a spatial object and may be used to distinguish two versions of the same spatial object.
  
    NOTE 3 The unique identifier will not change during the life-time of a spatial object."
    * identifier = "Base Types::Identifier"
    * tableName = "BASE_Identifier"
    id INTEGER NOT NULL PRIMARY KEY
    localId TEXT NOT NULL
    namespace TEXT NOT NULL
    <<lifeCycleInfo>>, <<voidable>> versionId TEXT
  }
  Metadata "Unknown" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unknown"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Unpopulated" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unpopulated"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
}
Container <<applicationSchema>> "Coverages (Domain and Range)" {
  * fileName = "Coverages (Domain and Range)"
  Attributes <<dataType>> "GMLCOV_GridFunction" {
    * description = "An explicit mapping rule for grid geometries"
    * identifier = "Coverages (Domain and Range)::GridFunction"
    * tableName = "GMLCOV_GridFunction"
    id INTEGER NOT NULL PRIMARY KEY
    sequenceRule_scanDirection <<missing>>
    sequenceRule_type TEXT CHECK(CIS_CV_SequenceType) DEFAULT 'linear'
    <<array>> startPoints TEXT
  }
}
Package "EA Model" {
  Class "applicationSchema" {}
  Datatype LegislationLevelValue
  
}

