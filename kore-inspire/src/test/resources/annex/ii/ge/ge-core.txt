Container <<applicationSchema>> "Geology" {
  * fileName = "Geology"
  Constraint Enum <<codeList>> "GE_MappingFrameValue" {
    * identifier = "Geology::MappingFrameValue"
  }
  Attributes <<featureType>> "GE_MappedInterval" {
    * description = "A special kind of mapped feature whose shape is a 1-D interval and which uses the SRS of the containing borehole."
    * identifier = "Geology::MappedInterval"
    * tableName = "GE_MappedInterval"
    id INTEGER NOT NULL PRIMARY KEY
    mappingFrame TEXT NOT NULL CHECK(GE_MappingFrameValue)
    shape GEOMETRY NOT NULL
  }
  Feature <<featureType>> "GE_MappedFeature" {
    * description = "A spatial representation of a GeologicFeature.
  
    A MappedFeature is part of a geological interpretation.
  
    It provides a link between a notional feature (description package) and one spatial representation of it, or part of it (exposures, surface traces and intercepts, etc) which forms the specific bounded occurrence, such as an outcrop or map polygon."
    * identifier = "Geology::MappedFeature"
    * tableName = "GE_MappedFeature"
    id INTEGER NOT NULL PRIMARY KEY
    mappingFrame TEXT NOT NULL CHECK(GE_MappingFrameValue)
    shape GEOMETRY NOT NULL
  }
  Attributes <<featureType>> "GE_AnthropogenicGeomorphologicFeature" {
    * description = "A geomorphologic feature (ie, landform) which has been created by human activity.
  
    EXAMPLE: dredged channel, midden, open pit, reclaimed land."
    * identifier = "Geology::AnthropogenicGeomorphologicFeature"
    * tableName = "GE_AnthropogenicGeomorphologicFeature"
    anthropogenicGeomorphologicFeatureType TEXT NOT NULL CHECK(GE_AnthropogenicGeomorphologicFeatureTypeValue)
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>> name : TEXT [0..1]
    inspireId BASE_Identifier as ref
  }
  Attributes <<featureType>> "GE_ShearDisplacementStructure" {
    * description = "Brittle to ductile style structures along which displacement has occurred.
  
    These range from from a simple, single 'planar' brittle or ductile surface to a fault system comprised of tens of strands of both brittle and ductile nature."
    * identifier = "Geology::ShearDisplacementStructure"
    * tableName = "GE_ShearDisplacementStructure"
    faultType TEXT NOT NULL CHECK(GE_FaultTypeValue)
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>> name : TEXT [0..1]
    inspireId BASE_Identifier as ref
  }
  Attributes <<featureType>> "GE_GeologicUnit" {
    * description = "A volume of rock with distinct characteristics.
  
    Includes both formal units (i.e. formally adopted and named in an official lexicon) and informal units (i.e. named but not promoted to the lexicon) and unnamed units (i.e. recognisable and described and delineable in the field but not otherwise formalised).
  
    Spatial properties are only available through association with a MappedFeature."
    * identifier = "Geology::GeologicUnit"
    * tableName = "GE_GeologicUnit"
    geologicUnitType TEXT NOT NULL CHECK(GE_GeologicUnitTypeValue)
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>> name : TEXT [0..1]
    inspireId BASE_Identifier as ref
  }
  Constraint Enum <<codeList>> "GE_GeologicUnitTypeValue" {
    * identifier = "Geology::GeologicUnitTypeValue"
  }
  Constraint Enum <<codeList>> "GE_NaturalGeomorphologicFeatureTypeValue" {
    * identifier = "Geology::NaturalGeomorphologicFeatureTypeValue"
  }
  Attributes <<featureType>> "GE_NaturalGeomorphologicFeature" {
    * description = "A geomorphologic feature (ie, landform) that has been created by natural Earth processes.
  
    EXAMPLE: river channel, beach ridge, caldera, canyon, moraine, mud flat."
    * identifier = "Geology::NaturalGeomorphologicFeature"
    * tableName = "GE_NaturalGeomorphologicFeature"
    id INTEGER NOT NULL PRIMARY KEY
    naturalGeomorphologicFeatureType TEXT NOT NULL CHECK(GE_NaturalGeomorphologicFeatureTypeValue)
    <<voidable>> activity TEXT CHECK(GE_GeomorphologicActivityValue)
    <<voidable>> name : TEXT [0..1]
    inspireId BASE_Identifier as ref
  }
  Class <<featureType>> "GeologicStructure" {
    <<voidable>> name : TEXT [0..1]
    inspireId BASE_Identifier as ref
  }
  Constraint Enum <<codeList>> "GE_FoldProfileTypeValue" {
    * identifier = "Geology::FoldProfileTypeValue"
  }
  Constraint Enum <<codeList>> "GE_BoreholePurposeValue" {
    * identifier = "Geology::BoreholePurposeValue"
  }
  Attributes <<featureType>> "GE_GeologicEvent" {
    * description = "An identifiable event during which one or more geological processes act to modify geological entities.
  
    A GeologicEvent should have a specified geologic age and process, and may have a specified environment. An example might be a cratonic uplift event during which erosion, sedimentation, and volcanism all take place. A GeologicEvent age can represent an instant in time or an interval of time."
    * identifier = "Geology::GeologicEvent"
    * tableName = "GE_GeologicEvent"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<array>> eventProcesses TEXT
    <<voidable>> eventEnvironment TEXT CHECK(GE_EventEnvironmentValue)
    <<voidable>> name TEXT
    <<voidable>> olderNamedAge TEXT CHECK(GE_GeochronologicEraValue)
    <<voidable>> youngerNamedAge TEXT CHECK(GE_GeochronologicEraValue)
  }
  Constraint Enum <<codeList>> "GE_CompositionPartRoleValue" {
    * identifier = "Geology::CompositionPartRoleValue"
  }
  Constraint Enum <<codeList>> "GE_LithologyValue" {
    * identifier = "Geology::LithologyValue"
  }
  Constraint Enum <<codeList>> "GE_ThematicClassificationValue" {
    * identifier = "Geology::ThematicClassificationValue"
  }
  Class <<featureType>> "GeomorphologicFeature" {
    <<voidable>> name : TEXT [0..1]
    inspireId BASE_Identifier as ref
  }
  Constraint Enum <<codeList>> "GE_EventEnvironmentValue" {
    * identifier = "Geology::EventEnvironmentValue"
  }
  Constraint Enum <<codeList>> "GE_AnthropogenicGeomorphologicFeatureTypeValue" {
    * identifier = "Geology::AnthropogenicGeomorphologicFeatureTypeValue"
  }
  Class <<featureType>> "GeologicFeature" {
    <<voidable>> name : TEXT [0..1]
    inspireId BASE_Identifier as ref
  }
  Constraint Enum <<codeList>> "GE_FaultTypeValue" {
    * identifier = "Geology::FaultTypeValue"
  }
  Constraint Enum <<codeList>> "GE_ThematicClassValue" {
    * identifier = "Geology::ThematicClassValue"
  }
  Attributes <<featureType>> "GE_Fold" {
    * description = "One or more systematically curved layers, surfaces, or lines in a rock body.
  
    A fold denotes a structure formed by the deformation of a Geologic Structure to form a structure that may be described by the translation of an abstract line (the fold axis) parallel to itself along some curvilinear path (the fold profile). Folds have a hinge zone (zone of maximum curvature along the surface) and limbs (parts of the deformed surface not in the hinge zone)."
    * identifier = "Geology::Fold"
    * tableName = "GE_Fold"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>> name : TEXT [0..1]
    <<voidable>> profileType TEXT CHECK(GE_FoldProfileTypeValue)
    inspireId BASE_Identifier as ref
  }
  Attributes <<featureType>> "GE_GeologicCollection" {
    * description = "A collection of geological or geophysical objects.
  
    Geologic objects are commonly grouped into collections such as geological maps, thematic maps, or the required input to a geological model."
    * identifier = "Geology::GeologicCollection"
    * tableName = "GE_GeologicCollection"
    collectionType TEXT NOT NULL CHECK(GE_CollectionTypeValue)
    id INTEGER NOT NULL PRIMARY KEY
    name TEXT NOT NULL
    <<voidable>>, <<lifeCycleInfo>> beginLifespanVersion DATETIME
    <<voidable>>, <<lifeCycleInfo>> endLifespanVersion DATETIME
    <<reference>> inspireId INTEGER
    <<voidable>> reference_date DATE
    <<voidable>> reference_level LegislationLevelValue
    <<voidable>> reference_link TEXT
    <<voidable>> reference_name TEXT
    <<voidable>> reference_type TEXT CHECK(BASE2_SimpleCitationType)
  }
  Attributes <<dataType>> "GE_CompositionPart" {
    * description = "The composition of a geologic unit in terms of lithological constituents."
    * identifier = "Geology::CompositionPart"
    * tableName = "GE_CompositionPart"
    id INTEGER NOT NULL PRIMARY KEY
    material TEXT NOT NULL CHECK(GE_LithologyValue)
    role TEXT NOT NULL CHECK(GE_CompositionPartRoleValue)
    <<voidable>> proportion QuantityRange
  }
  Constraint Enum <<codeList>> "GE_GeomorphologicActivityValue" {
    * identifier = "Geology::GeomorphologicActivityValue"
  }
  Constraint Enum <<codeList>> "GE_CollectionTypeValue" {
    * identifier = "Geology::CollectionTypeValue"
  }
  Constraint Enum <<codeList>> "GE_GeochronologicEraValue" {
    * identifier = "Geology::GeochronologicEraValue"
  }
  Constraint Enum <<codeList>> "GE_EventProcessValue" {
    * identifier = "Geology::EventProcessValue"
  }
  Class <<featureType>> "Borehole" {
    elevation_coordinate
    elevation_dimension : INTEGER
    location : POINT
    <<voidable>>, <<array>> purposes : TEXT [0..1]
    <<voidable>> boreholeLength : Quantity [0..1]
    <<voidable>> downholeGeometry : CURVE [0..1]
    inspireId BASE_Identifier as ref
  }
  Attributes <<dataType>> "GE_ThematicClass" {
    * description = "A generic thematic classifier to enable the reclassification of Geologic Features with user defined classes appropriate to thematic maps.
  
    This datatype allows Geologic Features to be classified against thematic classes. This provides a generic means of delivering geological thematic map data."
    * identifier = "Geology::ThematicClass"
    * tableName = "GE_ThematicClass"
    id INTEGER NOT NULL PRIMARY KEY
    themeClass TEXT NOT NULL CHECK(GE_ThematicClassValue)
    themeClassification TEXT NOT NULL CHECK(GE_ThematicClassificationValue)
  }
  Relation "GE_GeologicUnit_composition" {
    * profile = "attributes"
    * tableName = "GE_GeologicUnit_composition"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES GE_GeologicUnit(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES GE_CompositionPart(id)
  }
  Relation "GE_GeologicCollection_mapMember" {
    * profile = "features"
    * tableName = "GE_GeologicCollection_mapMember"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES GE_GeologicCollection(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES GE_MappedFeature(id)
  }
  Relation "GE_GeologicCollection_inspireId" {
    * profile = "attributes"
    * relatedReference = "attribute GE_GeologicCollection#inspireId"
    * tableName = "GE_GeologicCollection_inspireId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES GE_GeologicCollection(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "GE_GeologicCollection_geophObjectMember_GeophObject" {
    * profile = "attributes"
    * tableName = "GE_GeologicCollection_geophObjectMember_GeophObject"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES GE_GeologicCollection(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "GE_GeologicCollection_geophObjectSet_GeophObjectSet" {
    * profile = "attributes"
    * tableName = "GE_GeologicCollection_geophObjectSet_GeophObjectSet"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES GE_GeologicCollection(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
}
Container <<applicationSchema>> "Base Types 2" {
  * fileName = "Base Types 2"
  Constraint Enum <<enumeration>> "BASE2_SimpleCitationType" {
    CI_Citation
    DocumentCitation
    LegislationCitation
  }
  Attributes <<dataType>> "BASE2_SimpleCitation" {
    * tableName = "BASE2_SimpleCitation"
    date DATE
    id INTEGER NOT NULL PRIMARY KEY
    level LegislationLevelValue
    link TEXT
    name TEXT NOT NULL
    type TEXT NOT NULL CHECK(BASE2_SimpleCitationType)
  }
}
Container "Units of Measure" {
  * fileName = "Units of Measure"
  Constraint Enum <<codeList>> "GML_MeasureType" {
    * identifier = "Units of Measure::MeasureType"
    angle
    area
    length
    scale
    time
    velocity
    volume
    weight
  }
}
Container "Data quality information" {
  * fileName = "Data quality information"
  Class "DQ_PositionalAccuracy" {
    evaluationMethodDescription : TEXT [0..1]
    evaluationMethodType : TEXT [0..1]
    measureDescription : TEXT [0..1]
    measureIdentification : MD_Identifier [0..1]
    result : DQ_Result [1..2]
    <<array>> dateTimes : TEXT [0..1]
    <<array>> nameOfMeasures : TEXT [0..1]
    evaluationProcedure BASE2_SimpleCitation [0..1] as ref
  }
  Class "DQ_Result" {}
  Constraint Enum <<codeList>> "GMD_DQ_EvaluationMethodTypeCode" {
    * identifier = "Data quality information::DQ_EvaluationMethodTypeCode"
    directExternal
    directInternal
    indirect
  }
}
Container <<applicationSchema>> "Base Types" {
  * fileName = "Base Types"
  Attributes <<dataType>> "BASE_Identifier" {
    * description = "External unique object identifier published by the responsible body, which may be used by external applications to reference the spatial object.
  
    NOTE1 External object identifiers are distinct from thematic object identifiers.
  
    NOTE 2 The voidable version identifier attribute is not part of the unique identifier of a spatial object and may be used to distinguish two versions of the same spatial object.
  
    NOTE 3 The unique identifier will not change during the life-time of a spatial object."
    * identifier = "Base Types::Identifier"
    * tableName = "BASE_Identifier"
    id INTEGER NOT NULL PRIMARY KEY
    localId TEXT NOT NULL
    namespace TEXT NOT NULL
    <<lifeCycleInfo>>, <<voidable>> versionId TEXT
  }
  Metadata "Unknown" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unknown"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Unpopulated" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unpopulated"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
}
Package "EA Model" {
  Class "applicationSchema" {}
  Datatype LegislationLevelValue
  
}

Package "Simple Components" {
  Class "AllowedTokens" {
    xsdDerivation = "true#NOTES#Values: true | false
    Default: true
    Description: class implemented as new type + element, or by applying constraints only
    "
    <<property>>, <<array>> values : TEXT [0..1]
    <<property>> pattern : TEXT [0..1]
  }
  Class <<type>> "QuantityRange" {
    xsdDerivation = "true#NOTES#Values: true | false
    Default: true
    Description: class implemented as new type + element, or by applying constraints only
    "
    uom_formula : TEXT [0..1]
    uom_measureType : TEXT
    uom_nameStandardUnit : TEXT [0..1]
    uom_offsetToStandardUnit : DOUBLE [0..1]
    uom_scaleToStandardUnit : DOUBLE [0..1]
    uom_uomName : TEXT
    uom_uomSymbol : TEXT
    <<property>> axisID : TEXT [0..1]
    <<property>> constraint : AllowedValues [0..1]
    <<property>> definition : ScopedName [0..1]
    <<property>> description : TEXT [0..1]
    <<property>> extension : Any [0..*]
    <<property>> identifier : ScopedName [0..1]
    <<property>> label : TEXT [0..1]
    <<property>> nilValues : NilValues [0..1]
    <<property>> optional : BOOLEAN [0..1]
    <<property>> quality : Quality [0..*]
    <<property>> referenceFrame : SC_CRS [0..1]
    <<property>> updatable : BOOLEAN [0..1]
    <<property>> value SWE_RealPair [0..1] as ref
  }
  Class <<union>> "Quality" {
    hasXmlLang = "false#NOTES#Values: true | false
    Default: false
    Description: axml attribute xml:lang shall be generated for the type representing the class
    "
    <<property>> byCategory : Category
    <<property>> byQuantity : Quantity
    <<property>> byQuantityRange : QuantityRange
    <<Property>> byText : Text
  }
  Class "AllowedValues" {
    xsdDerivation = "true#NOTES#Values: true | false
    Default: true
    Description: class implemented as new type + element, or by applying constraints only
    "
    <<property>>, <<array>> values : TEXT [0..1]
    <<property>> significantFigures : INTEGER [0..1]
    <<Property>> interval SWE_RealPair [0..*] as ref
  }
  Class <<type>> "Text" {
    xsdDerivation = "true#NOTES#Values: true | false
    Default: true
    Description: class implemented as new type + element, or by applying constraints only
    "
    <<property>> axisID : TEXT [0..1]
    <<property>> constraint : AllowedTokens [0..1]
    <<property>> definition : ScopedName [0..1]
    <<property>> description : TEXT [0..1]
    <<property>> extension : Any [0..*]
    <<property>> identifier : ScopedName [0..1]
    <<property>> label : TEXT [0..1]
    <<property>> nilValues : NilValues [0..1]
    <<property>> optional : BOOLEAN [0..1]
    <<property>> quality : Quality [0..*]
    <<property>> referenceFrame : SC_CRS [0..1]
    <<property>> updatable : BOOLEAN [0..1]
    <<property>> value : TEXT [0..1]
  }
  Class <<type>> "Category" {
    xsdDerivation = "true#NOTES#Values: true | false
    Default: true
    Description: class implemented as new type + element, or by applying constraints only
    "
    <<property>> axisID : TEXT [0..1]
    <<property>> codeSpace : Dictionary [0..1]
    <<property>> constraint : AllowedTokens [0..1]
    <<property>> definition : ScopedName [0..1]
    <<property>> description : TEXT [0..1]
    <<property>> extension : Any [0..*]
    <<property>> identifier : ScopedName [0..1]
    <<property>> label : TEXT [0..1]
    <<property>> nilValues : NilValues [0..1]
    <<property>> optional : BOOLEAN [0..1]
    <<property>> quality : Quality [0..*]
    <<property>> referenceFrame : SC_CRS [0..1]
    <<property>> updatable : BOOLEAN [0..1]
    <<property>> value : TEXT [0..1]
  }
  Class <<type>> "Quantity" {
    xsdDerivation = "true#NOTES#Values: true | false
    Default: true
    Description: class implemented as new type + element, or by applying constraints only
    "
    uom_formula : TEXT [0..1]
    uom_measureType : TEXT
    uom_nameStandardUnit : TEXT [0..1]
    uom_offsetToStandardUnit : DOUBLE [0..1]
    uom_scaleToStandardUnit : DOUBLE [0..1]
    uom_uomName : TEXT
    uom_uomSymbol : TEXT
    <<property>> axisID : TEXT [0..1]
    <<property>> constraint : AllowedValues [0..1]
    <<property>> definition : ScopedName [0..1]
    <<property>> description : TEXT [0..1]
    <<property>> extension : Any [0..*]
    <<property>> identifier : ScopedName [0..1]
    <<property>> label : TEXT [0..1]
    <<property>> nilValues : NilValues [0..1]
    <<property>> optional : BOOLEAN [0..1]
    <<property>> quality : Quality [0..*]
    <<property>> referenceFrame : SC_CRS [0..1]
    <<property>> updatable : BOOLEAN [0..1]
    <<property>> value : DOUBLE [0..1]
  }
  Class <<type>> "NilValues" {
    xsdDerivation = "true"
  }
}
Package "Coordinate Reference Systems" {
  Class <<type>> "SC_CRS" {
    xmlSchemaType = "#NOTES#Description: If the type has a canonical XML Schema encoding the XML Schema typename corresponding to the data type shall be given as the value (applies to ISO 19136:2007 encoding rule)
    "
    alias : GenericName [0..*]
    domainOfValidity : EX_Extent [0..1]
    identifier : RS_Identifier [0..*]
    name : RS_Identifier
    remarks : TEXT [0..1]
    <<array>> scopes : TEXT
    coordOperationFrom CC_CoordinateOperation [0..*] as ref
    coordOperationTo CC_CoordinateOperation [0..*] as ref
    directPosition DirectPosition [0..*] as ref
    grid CV_ReferenceableGrid [0..*] as ref
    grid CV_ReferenceableGrid [0..*] as ref
    object GEOMETRY [0..*] as ref
  }
}
Package "Names" {
  Class <<type>> "NameSpace" {
    isGlobal : BOOLEAN
    acceptableClassList TypeName [0..*] as ref
    name GenericName [0..*] as ref
  }
  Class <<type>>, <<type>> "TypeName" {
    aName : TEXT
    scope NameSpace as ref
  }
  Class <<type>>, <<type>> "GenericName" {
    scope NameSpace as ref
  }
  Class <<type>> "ScopedName" {
    scope NameSpace as ref
  }
}
Package "Records and Class Metadata" {
  Class <<type>>, <<type>> "Any" {}
}
Container "Basic Types" {
  * fileName = "Basic Types"
  Attributes <<dataType>> "SWE_RealPair" {
    * identifier = "Basic Types::RealPair"
    * tableName = "SWE_RealPair"
    asXMLList = "true"
    xsdDerivation = "true#NOTES#Values: true | false
    Default: true
    Description: class implemented as new type + element, or by applying constraints only
    "
    id INTEGER NOT NULL PRIMARY KEY
    <<property>>, <<array>> items TEXT
  }
}
Package "Reference system information" {
  Class "RS_Identifier" {
    authority_date : DATE [0..1]
    authority_level : LegislationLevelValue [0..1]
    authority_link : TEXT [0..1]
    authority_name : TEXT [0..1]
    authority_type : TEXT [0..1]
    code : TEXT
    codeSpace : TEXT [0..1]
    version : TEXT [0..1]
  }
  Class "MD_Identifier" {
    authority_date : DATE [0..1]
    authority_level : LegislationLevelValue [0..1]
    authority_link : TEXT [0..1]
    authority_name : TEXT [0..1]
    authority_type : TEXT [0..1]
    code : TEXT
  }
}
Package "Extent information" {
  Class "EX_Extent" {
    RationalRose$Java:ConstructorIs = "public"
    RationalRose$Java:Final = "False"
    RationalRose$Java:GenerateDefaultConstructor = "True"
    RationalRose$Java:GenerateFinalizer = "False"
    RationalRose$Java:GenerateInstanceInitializer = "False"
    RationalRose$Java:GenerateStaticInitializer = "False"
    RationalRose$Oracle8:CollectionOfREFS = "False"
    RationalRose$Visual Basic:CollectionClass = "Collection"
    RationalRose$Visual Basic:Creatable = "(221)"
    RationalRose$Visual Basic:GenerateInitialization = "False"
    RationalRose$Visual Basic:GenerateTermination = "False"
    RationalRose$Visual Basic:OptionBase = "(none)"
    RationalRose$Visual Basic:OptionCompare = "(none)"
    RationalRose$Visual Basic:OptionExplicit = "True"
    description : TEXT [0..1]
  }
}
Package "Coordinate Operations" {
  Class <<type>> "CC_CoordinateOperation" {
    xmlSchemaType = "#NOTES#Description: If the type has a canonical XML Schema encoding the XML Schema typename corresponding to the data type shall be given as the value (applies to ISO 19136:2007 encoding rule)
    "
    alias : GenericName [0..*]
    domainOfValidity_description : TEXT [0..1]
    identifier : RS_Identifier [0..*]
    name : RS_Identifier
    operationVersion : TEXT [0..1]
    remarks : TEXT [0..1]
    <<array>> scopes : TEXT
    concatOperation CC_ConcatenatedOperation [0..*] as ref
    coordinateOperationAccuracy DQ_PositionalAccuracy [0..*] as ref
    passThruOperation CC_PassThroughOperation [0..*] as ref
    sourceCRS SC_CRS [0..1] as ref
    targetCRS SC_CRS [0..1] as ref
  }
}
Package "dictionary" {
  Class <<type>> "Dictionary" {
    description : TEXT [0..1]
    descriptionReference : TEXT [0..1]
    identifier : ScopedName [0..1]
    name : GenericName [0..*]
  }
}
