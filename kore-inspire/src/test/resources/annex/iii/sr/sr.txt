Container <<applicationSchema>> "Sea Regions" {
  * fileName = "Sea Regions"
  Feature <<featureType>> "SR_ShoreSegment" {
    * description = "A Shore Segment is a section of shore line.
  
    Where it is possible to provide attributes about shore stability (eroding, stable etc) and/or shore type (sand, rock, harbour etc). Then the Shore Segment should be used in place of the GML LineString element to describe curve segments."
    * identifier = "Sea Regions::ShoreSegment"
    * tableName = "SR_ShoreSegment"
    geometry CURVE NOT NULL
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>> shoreClassification TEXT CHECK(SR_ShoreTypeClassificationValue)
    <<voidable>> shoreStability TEXT CHECK(SR_ShoreStabilityValue)
  }
  Attributes <<featureType>> "SR_SeaSurfaceArea" {
    * description = "An area of the sea surface with some type of cover e.g. an area of sea ice.
  
    This describes a sea region according to the characteristics of the sea surface rather than characteristics of the water column in general. It is analogous to the concept of LandCover (INSPIRE Annex III)."
    * identifier = "Sea Regions::SeaSurfaceArea"
    * tableName = "SR_SeaSurfaceArea"
    geometry GEOMETRY
    id INTEGER NOT NULL PRIMARY KEY
    surfaceType TEXT NOT NULL CHECK(SR_SeaSurfaceClassificationValue)
  }
  Feature <<featureType>> "SR_Sea" {
    * description = "Extent of sea at High Water (meanHighWater).
  
    An area of sea, bounded by land and adjacent sea regions.  May contain smaller scale sea regions. Has common large scale circulation patterns, in part defined by its land boundaries.  High Water is taken to be mean high water.  Applies to common names areas of sea, e.g. North Sea, Agean Sea etc. (Source: IHO S23 SeaRegion)"
    * identifier = "Sea Regions::Sea"
    * tableName = "SR_Sea"
    extent_geometry MULTISURFACE NOT NULL
    extent_waterLevel TEXT CHECK(HY_P_WaterLevelValue)
    id INTEGER NOT NULL PRIMARY KEY
    seaAreaType TEXT CHECK(SR_SeaAreaTypeClassificationValue)
    <<voidable>>, <<lifeCycleInfo>> beginLifespanVersion DATETIME
    <<voidable>>, <<lifeCycleInfo>> endLifespanVersion DATETIME
    <<reference>> inspireId INTEGER
    relatedHydroObject_HydroObject BASE_Identifier [0..*] as ref
    <<voidable>> geographicalName BASE2_SimpleGeographicalName [0..*] as ref
    <<voidable>> hydroId HY_HydroIdentifier [0..*] as ref
  }
  Constraint Enum <<codeList>> "SR_ShoreTypeClassificationValue" {
    * identifier = "Sea Regions::ShoreTypeClassificationValue"
  }
  Attributes <<dataType>> "SR_ParameterValuePair" {
    * description = "A parameter value pair contains a value of some observed property. e.g. Annual Mean Sea Surface Temperature."
    * identifier = "Sea Regions::ParameterValuePair"
    * tableName = "SR_ParameterValuePair"
    id INTEGER NOT NULL PRIMARY KEY
    parameter AbstractObservableProperty NOT NULL
    value TEXT NOT NULL
    value_uom TEXT NOT NULL CHECK(GML_UomIdentifier)
  }
  Feature <<dataType>> "SR_MarineIsoline" {
    * description = "An isoline representing a particular value of some marine physical or chemical phenomenon such as temperature, salinity or wave height.
  
    A Marine Contour representing a particular value of some phenomenon. The geometry of the contour is a GM_Multicurve, i.e. may be formulated from several curves, all representing  the same value e.g. 15 degrees celsius."
    * identifier = "Sea Regions::MarineIsoline"
    * tableName = "SR_MarineIsoline"
    geometry MULTICURVE NOT NULL
    id INTEGER NOT NULL PRIMARY KEY
    value TEXT NOT NULL
    value_uom TEXT NOT NULL CHECK(GML_UomIdentifier)
  }
  Attributes <<featureType>> "SR_SeaBedArea" {
    * description = "An area of the sea bed with some identified type of cover. e.g. an area of vegetation or sediment type.
  
    This describes a sea region according to the characteristics of the sea bed  rather than characteristics of the water column in general.  It does not include the subsea geology and is analogous to the concept of LandCover (INSPIRE Annex III)."
    * identifier = "Sea Regions::SeaBedArea"
    * tableName = "SR_SeaBedArea"
    geometry GEOMETRY
    id INTEGER NOT NULL PRIMARY KEY
    <<array>> surfaceTypes TEXT NOT NULL
  }
  Attributes <<featureType>> "SR_SeaArea" {
    * description = "An area of sea defined according to its physical and chemical characteristics. It may have multiple geometries (extent) to represent different tidal states.
  
    A SeaArea is a type of HydroObject as described in the Annex1 theme Hydrography. It has geometry described by one or more GM_MultiSurfaces. Multiple geometries are allowed  to enable a SeaArea to be described according to different tidal states.
  
    Typically however, specialisations of SeaArea will restrict the geometry to a particular tidal state or set of tidal states.  SeaAreas include named seas such as ‘Baltic Sea’ and also un-named areas of sea that have particular chemical and physical characteristics.  SeaAreas are 2D objects and carry no explicit information about the depth of the sea, this is specified in the INSPIRE Elevation Theme."
    * identifier = "Sea Regions::SeaArea"
    * tableName = "SR_SeaArea"
    id INTEGER NOT NULL PRIMARY KEY
    seaAreaType TEXT CHECK(SR_SeaAreaTypeClassificationValue)
    <<voidable>>, <<lifeCycleInfo>> beginLifespanVersion DATETIME
    <<voidable>>, <<lifeCycleInfo>> endLifespanVersion DATETIME
    <<reference>> inspireId INTEGER
    relatedHydroObject_HydroObject BASE_Identifier [0..*] as ref
    <<voidable>> geographicalName BASE2_SimpleGeographicalName [0..*] as ref
    <<voidable>> hydroId HY_HydroIdentifier [0..*] as ref
  }
  Attributes <<featureType>> "SR_Shoreline" {
    * description = "Any Boundary between a Sea Area and land."
    * identifier = "Sea Regions::Shoreline"
    * tableName = "SR_Shoreline"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>> waterLevel TEXT CHECK(HY_P_WaterLevelValue)
    relatedHydroObject_HydroObject BASE_Identifier [0..*] as ref
    <<voidable>> geographicalName BASE2_SimpleGeographicalName [0..*] as ref
    <<voidable>> hydroId HY_HydroIdentifier [0..*] as ref
  }
  Attributes <<featureType>> "SR_Coastline" {
    * description = "A special case of a shoreline defined as the shoreline at Mean High Water (MHW). Where there is not significant variation in water level, Mean Sea Level (MSL) can be used as a substitute for MHW.
  
    This feature type is designed for the general use case where the land:sea boundary is required to support general discovery and viewing of datasets.  It is not designed to infer any political boundaries.  The purpose is to provide a consistent overview of European marine extent and for this reason a single tidal extent is selected.  This is consistent with IHO-57 definitions"
    * identifier = "Sea Regions::Coastline"
    * tableName = "SR_Coastline"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>> waterLevel TEXT CHECK(HY_P_WaterLevelValue)
    relatedHydroObject_HydroObject BASE_Identifier [0..*] as ref
    <<voidable>> geographicalName BASE2_SimpleGeographicalName [0..*] as ref
    <<voidable>> hydroId HY_HydroIdentifier [0..*] as ref
  }
  Constraint Enum <<codeList>> "SR_ShoreStabilityValue" {
    * identifier = "Sea Regions::ShoreStabilityValue"
  }
  Feature <<featureType>> "SR_MarineCirculationZone" {
    * description = "A sea area defined by its physical and chemical circulation patterns.
  
    Typically used for management and reporting of the marine environment or marine environmental classification."
    * identifier = "Sea Regions::MarineCirculationZone"
    * tableName = "SR_MarineCirculationZone"
    extent_geometry MULTISURFACE NOT NULL
    extent_waterLevel TEXT CHECK(HY_P_WaterLevelValue)
    id INTEGER NOT NULL PRIMARY KEY
    seaAreaType TEXT CHECK(SR_SeaAreaTypeClassificationValue)
    zoneType TEXT NOT NULL CHECK(SR_ZoneTypeValue)
    <<voidable>>, <<lifeCycleInfo>> beginLifespanVersion DATETIME
    <<voidable>>, <<lifeCycleInfo>> endLifespanVersion DATETIME
    <<reference>> inspireId INTEGER
    relatedHydroObject_HydroObject BASE_Identifier [0..*] as ref
    <<voidable>> geographicalName BASE2_SimpleGeographicalName [0..*] as ref
    <<voidable>> hydroId HY_HydroIdentifier [0..*] as ref
  }
  Constraint Enum <<codeList>> "SR_SeaBedCoverValue" {
    * identifier = "Sea Regions::SeaBedCoverValue"
  }
  Abstract Class <<featureType>> "MarineLayer" {
    geometry GEOMETRY
  }
  Constraint Enum <<codeList>> "SR_SeaSurfaceClassificationValue" {
    * identifier = "Sea Regions::SeaSurfaceClassificationValue"
  }
  Constraint Enum <<codeList>> "SR_ZoneTypeValue" {
    * identifier = "Sea Regions::ZoneTypeValue"
  }
  Attributes <<featureType>> "SR_InterTidalArea" {
    * description = "The part of the marine environment that is exposed (not covered in water) during a normal tidal cycle; defined as the difference between any high and any low water level.
  
    The part of the marine environment that is exposed (not covered in water) during a normal tidal cycle."
    * identifier = "Sea Regions::InterTidalArea"
    * tableName = "SR_InterTidalArea"
    geometry MULTISURFACE NOT NULL
    highWaterLevel TEXT NOT NULL CHECK(HY_P_WaterLevelValue)
    id INTEGER NOT NULL PRIMARY KEY
    lowWaterLevel TEXT NOT NULL CHECK(HY_P_WaterLevelValue)
    <<voidable>>, <<lifeCycleInfo>> beginLifespanVersion DATETIME
    <<voidable>>, <<lifeCycleInfo>> endLifespanVersion DATETIME
    <<voidable>> composition TEXT CHECK(HY_P_ShoreTypeValue)
    <<voidable>> delineationKnown BOOLEAN
    inspireId BASE_Identifier as ref
    relatedHydroObject_HydroObject BASE_Identifier [0..*] as ref
    <<voidable>> geographicalName BASE2_SimpleGeographicalName [0..*] as ref
    <<voidable>> hydroId HY_HydroIdentifier [0..*] as ref
  }
  Feature <<dataType>> "SR_MarineExtent" {
    * description = "The extent of a sea area for a given tidal state
  
    The expected 2D geometric extent of a SeaArea for a particular tidal state."
    * identifier = "Sea Regions::MarineExtent"
    * tableName = "SR_MarineExtent"
    geometry MULTISURFACE NOT NULL
    id INTEGER NOT NULL PRIMARY KEY
    waterLevel TEXT CHECK(HY_P_WaterLevelValue)
  }
  Attributes <<featureType>> "SR_MarineContour" {
    * description = "A set of isolines representing the value of some phenomenon at a particular time.
  
    A representation of any physical or chemical phenomenon related to the SeaArea.  MarineContour should be derived from an OceanGeographicFeature of the same phenomenon.  The source observations used to derive this feature may be linked to via the sourceObservations association. MarineContour is an abstraction of the ‘real world’ to provide an overview of the expected conditions of a SeaArea.  Examples would include salinity contours, depth contours, significant wave height."
    * identifier = "Sea Regions::MarineContour"
    * tableName = "SR_MarineContour"
    id INTEGER NOT NULL PRIMARY KEY
    phenomenon AbstractObservableProperty NOT NULL
    validTime_position_anyOther_indeterminatePosition TEXT CHECK(TRS_TM_IndeterminateValue)
    validTime_position_date8601 DATE
    validTime_position_dateTime8601 DATETIME
    validTime_position_time8601 TEXT
    validTime_position_time8601_uom TEXT CHECK(GML_UomIdentifier)
  }
  Constraint Enum <<codeList>> "SR_SeaAreaTypeClassificationValue" {
    * identifier = "Sea Regions::SeaAreaTypeClassificationValue"
  }
  Relation "SR_Sea_<<missing>>_MaritimeZone" {
    * profile = "attributes"
    * tableName = "SR_Sea_<<missing>>_MaritimeZone"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES SR_Sea(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "SR_SeaArea_subArea" {
    * profile = "attributes"
    * tableName = "SR_SeaArea_subArea"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES SR_SeaArea(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES SR_SeaArea(id)
  }
  Relation "SR_SeaArea_inspireId" {
    * profile = "attributes"
    * relatedReference = "attribute SR_SeaArea#inspireId"
    * tableName = "SR_SeaArea_inspireId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES SR_SeaArea(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "SR_SeaArea_parameterValue" {
    * profile = "attributes"
    * tableName = "SR_SeaArea_parameterValue"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES SR_SeaArea(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES SR_ParameterValuePair(id)
  }
  Relation "SR_SeaArea_extent" {
    * profile = "features"
    * tableName = "SR_SeaArea_extent"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES SR_SeaArea(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES SR_MarineExtent(id)
  }
  Relation "SR_Shoreline_segment" {
    * profile = "features"
    * tableName = "SR_Shoreline_segment"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES SR_Shoreline(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES SR_ShoreSegment(id)
  }
  Relation "SR_MarineContour_sourceObservations_ObservationSet" {
    * profile = "attributes"
    * tableName = "SR_MarineContour_sourceObservations_ObservationSet"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES SR_MarineContour(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "SR_MarineContour_isoline" {
    * profile = "features"
    * tableName = "SR_MarineContour_isoline"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES SR_MarineContour(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES SR_MarineIsoline(id)
  }
}
Container "Temporal Reference System" {
  * fileName = "Temporal Reference System"
  Constraint Enum <<enumeration>> "TRS_TM_IndeterminateValue" {
    * identifier = "Temporal Reference System::TM_IndeterminateValue"
    after
    before
    name
    now
    unknow
  }
}
Container <<applicationSchema>> "Hydro - Physical Waters" {
  * fileName = "Hydro - Physical Waters"
  Constraint Enum <<codeList>> "HY_P_ShoreTypeValue" {
    * identifier = "Hydro - Physical Waters::ShoreTypeValue"
    boulders
    clay
    gravel
    mud
    rock
    sand
    shingle
    stone
  }
  Constraint Enum <<codeList>> "HY_P_WaterLevelValue" {
    * identifier = "Hydro - Physical Waters::WaterLevelValue"
    equinoctialSpringLowWater
    highWater
    highWaterSprings
    higherHighWater
    higherHighWaterLargeTide
    highestAstronomicalTide
    highestHighWater
    indianSpringHighWater
    indianSpringLowWater
    localDatum
    lowWater
    lowWaterDatum
    lowWaterSprings
    lowerLowWater
    lowerLowWaterLargeTide
    lowestAstronomicalTide
    lowestLowWater
    lowestLowWaterSprings
    meanHighWater
    meanHighWaterNeaps
    meanHighWaterSprings
    meanHigherHighWater
    meanHigherHighWaterSprings
    meanHigherLowWater
    meanLowWater
    meanLowWaterNeaps
    meanLowWaterSprings
    meanLowerHighWater
    meanLowerLowWater
    meanLowerLowWaterSprings
    meanSeaLevel
    meanTideLevel
    meanWaterLevel
    nearlyHighestHighWater
    nearlyLowestLowWater
    tropicHigherHighWater
    tropicLowerLowWater
  }
}
Container <<applicationSchema>> "Base Types" {
  * fileName = "Base Types"
  Attributes <<dataType>> "BASE_Identifier" {
    * description = "External unique object identifier published by the responsible body, which may be used by external applications to reference the spatial object.
  
    NOTE1 External object identifiers are distinct from thematic object identifiers.
  
    NOTE 2 The voidable version identifier attribute is not part of the unique identifier of a spatial object and may be used to distinguish two versions of the same spatial object.
  
    NOTE 3 The unique identifier will not change during the life-time of a spatial object."
    * identifier = "Base Types::Identifier"
    * tableName = "BASE_Identifier"
    id INTEGER NOT NULL PRIMARY KEY
    localId TEXT NOT NULL
    namespace TEXT NOT NULL
    <<lifeCycleInfo>>, <<voidable>> versionId TEXT
  }
  Metadata "Unknown" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unknown"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Unpopulated" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unpopulated"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
}
Package <<applicationSchema>> "Observable Properties" {
  Abstract GF_PropertyType <<type>> "AbstractObservableProperty" {
    xmlSchemaType = "#NOTES#Description: If the type has a canonical XML Schema encoding the XML Schema typename corresponding to the data type shall be given as the value (applies to ISO 19136:2007 encoding rule)
    "
    <<array>> labels : TEXT [0..1]
  }
}
Container <<applicationSchema>> "Base Types 2" {
  * fileName = "Base Types 2"
  Attributes <<dataType>> "BASE2_SimpleGeographicalName" {
    * tableName = "BASE2_SimpleGeographicalName"
    id INTEGER NOT NULL PRIMARY KEY
    language TEXT
    spelling_text TEXT NOT NULL
  }
}
Container <<applicationSchema>> "Hydro - base" {
  * fileName = "Hydro - base"
  Attributes <<dataType>> "HY_HydroIdentifier" {
    * description = "A hydrographic thematic identifier.
  
    NOTE May be used to hold a national hydrological identification code."
    * identifier = "Hydro - base::HydroIdentifier"
    * tableName = "HY_HydroIdentifier"
    classificationScheme TEXT
    id INTEGER NOT NULL PRIMARY KEY
    localId TEXT NOT NULL
    namespace TEXT NOT NULL
  }
}
Package "EA Model" {
  Class "applicationSchema" {}
}

Container "Units of Measure" {
  * fileName = "Units of Measure"
  Constraint Enum "GML_UomIdentifier" {}
}
Package "General Feature Model" {
  Class <<MetaClass>>, <<metaclass>> "GF_PropertyType" {
    definition : TEXT
    propertyTypeMetadata MD_Metadata [0..*] as ref
    rule PF_PortrayalRule [0..*] as ref
    theGF_FeatureType GF_FeatureType as ref
  }
  Class "GF_InheritanceRelation" {
    description : TEXT
    name[0..1] : TEXT
    uniqueInstance : BOOLEAN
    subtype GF_FeatureType as ref
    supertype GF_FeatureType as ref
  }
  Class <<metaclass>> "GF_FeatureType" {
    definition : TEXT
    isAbstract : BOOLEAN
    carrierOfCharacteristics GF_PropertyType [0..*] as ref
    featureTypeMetadata MD_Metadata [0..*] as ref
    linkBetween GF_AssociationType [0..*] as ref
    ruleSet PF_FeaturePortrayal [0..*] as ref
    theGF_InheritanceRelation GF_InheritanceRelation [0..*] as ref
    theGF_InheritanceRelation GF_InheritanceRelation [0..*] as ref
  }
  Class <<MetaClass>>, <<metaclass>> "GF_Operation" {
    definition : TEXT
    signature : TEXT
    dependsOn GF_AssociationType [0..*] as ref
    propertyTypeMetadata MD_Metadata [0..*] as ref
    rule PF_PortrayalRule [0..*] as ref
    theGF_FeatureType GF_FeatureType as ref
  }
  Class <<MetaClass>>, <<metaclass>> "GF_AssociationType" {
    definition : TEXT
    isAbstract : BOOLEAN
    carrierOfCharacteristics GF_PropertyType [0..*] as ref
    featureTypeMetadata MD_Metadata [0..*] as ref
    includes GF_FeatureType [1..*] as ref
    linkBetween GF_AssociationType [0..*] as ref
    ruleSet PF_FeaturePortrayal [0..*] as ref
    theGF_InheritanceRelation GF_InheritanceRelation [0..*] as ref
    theGF_InheritanceRelation GF_InheritanceRelation [0..*] as ref
    theGF_Operation GF_Operation [0..*] as ref
  }
}
