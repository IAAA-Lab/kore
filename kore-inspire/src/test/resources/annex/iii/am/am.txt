Container <<applicationSchema>> "Area Management Restriction and Regulation Zones" {
  * fileName = "Area Management Restriction and Regulation Zones"
  Constraint Enum <<codeList>> "AM_ZoneTypeCode" {
    * identifier = "Area Management Restriction and Regulation Zones::ZoneTypeCode"
    WFDWaterBody
    airQualityManagementZone
    animalHealthRestrictionZone
    areaForDumpingOfWaste
    bathingWaters
    coastalZoneManagementArea
    designatedWaters
    drinkingWaterProtectionArea
    floodManagementUnit
    forestManagementArea
    marineRegion
    nitrateVulnerableZone
    noiseRestrictionZone
    plantHealthProtectionZone
    prospectingAndMiningPermitArea
    regulatedFairwayAtSeaOrLargeInlandWater
    restrictedZonesAroundContaminatedSites
    riverBasinDistrict
    sensitiveArea
  }
  Feature <<featureType>> "AM_ManagementRestrictionOrRegulationZone" {
    * description = "Area managed, restricted or regulated in accordance with a legal requirement related to an environmental policy or a policy or activity that may have an impact on the environment at any level of administration (or used for reporting at international, European, national, regional and local) levels."
    * identifier = "Area Management Restriction and Regulation Zones::ManagementRestrictionOrRegulationZone"
    * tableName = "AM_ManagementRestrictionOrRegulationZone"
    geometry GEOMETRY NOT NULL
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<lifeCycleInfo>> beginLifespanVersion DATETIME
    <<voidable>>, <<lifeCycleInfo>> endLifespanVersion DATETIME
    <<array>> environmentalDomains TEXT NOT NULL
    <<reference>> inspireId INTEGER
    <<voidable>> specialisedZoneType TEXT CHECK(AM_SpecialisedZoneTypeCode)
    <<array>> zoneTypes TEXT NOT NULL
  }
  Constraint Enum <<codeList>> "AM_EnvironmentalDomain" {
    * identifier = "Area Management Restriction and Regulation Zones::EnvironmentalDomain"
    air
    climateAndClimateChange
    healthProtection
    landUse
    naturalResources
    natureAndBiodiversity
    noise
    soil
    sustainableDevelopment
    waste
    water
  }
  Constraint Enum <<codeList>> "AM_SpecialisedZoneTypeCode" {
    * identifier = "Area Management Restriction and Regulation Zones::SpecialisedZoneTypeCode"
  }
  Relation "AM_ManagementRestrictionOrRegulationZone_relatedZone" {
    * profile = "features"
    * tableName = "AM_ManagementRestrictionOrRegulationZone_relatedZone"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AM_ManagementRestrictionOrRegulationZone(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES AM_ManagementRestrictionOrRegulationZone(id)
  }
  Relation "AM_ManagementRestrictionOrRegulationZone_inspireId" {
    * profile = "attributes"
    * relatedReference = "attribute AM_ManagementRestrictionOrRegulationZone#inspireId"
    * tableName = "AM_ManagementRestrictionOrRegulationZone_inspireId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AM_ManagementRestrictionOrRegulationZone(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "AM_ManagementRestrictionOrRegulationZone_thematicId" {
    * profile = "attributes"
    * tableName = "AM_ManagementRestrictionOrRegulationZone_thematicId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AM_ManagementRestrictionOrRegulationZone(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_ThematicIdentifier(id)
  }
  Relation "AM_ManagementRestrictionOrRegulationZone_name" {
    * profile = "attributes"
    * tableName = "AM_ManagementRestrictionOrRegulationZone_name"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AM_ManagementRestrictionOrRegulationZone(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AM_ManagementRestrictionOrRegulationZone_competentAuthority" {
    * profile = "attributes"
    * tableName = "AM_ManagementRestrictionOrRegulationZone_competentAuthority"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AM_ManagementRestrictionOrRegulationZone(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_RelatedParty(id)
  }
}
Container "Temporal Reference System" {
  * fileName = "Temporal Reference System"
  Constraint Enum <<enumeration>> "TRS_TM_IndeterminateValue" {
    * identifier = "Temporal Reference System::TM_IndeterminateValue"
    after
    before
    name
    now
    unknow
  }
}
Container <<applicationSchema>> "Base Types 2" {
  * fileName = "Base Types 2"
  Attributes <<dataType>> "BASE2_Contact" {
    * description = "Communication channels by which it is possible to gain access to someone or something."
    * identifier = "Base Types 2::Contact"
    * tableName = "BASE2_Contact"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<reference>> address INTEGER
    <<voidable>>, <<array>> telephoneFacsimiles TEXT
    <<voidable>>, <<array>> telephoneVoices TEXT
    <<voidable>> electronicMailAddress TEXT
    <<voidable>> website TEXT
  }
  Constraint Enum <<codeList>> "BASE2_PartyRoleValue" {
    * identifier = "Base Types 2::PartyRoleValue"
  }
  Attributes <<dataType>> "BASE2_RelatedParty" {
    * description = "An organisation or a person with a role related to a resource.
  
    NOTE 1 A party, typically an individual person, acting as a general point of contact for a resource can be specified without providing any particular role."
    * identifier = "Base Types 2::RelatedParty"
    * tableName = "BASE2_RelatedParty"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<reference>> contact INTEGER
    <<voidable>>, <<array>> roles TEXT
  }
  Attributes <<dataType>> "BASE2_ThematicIdentifier" {
    * description = "Thematic identifier to uniquely identify the spatial object.
  
    Some spatial objects may be assigned multiple unique identifiers.
  
    These may have been established to meet data exchange requirements of different reporting obligations at International, European or national levels and/or internal data maintenance requirements."
    * identifier = "Base Types 2::ThematicIdentifier"
    * tableName = "BASE2_ThematicIdentifier"
    id INTEGER NOT NULL PRIMARY KEY
    identifier TEXT NOT NULL
    identifierScheme TEXT NOT NULL
  }
  Constraint Enum <<codeList>> "BASE2_LegislationLevelValue" {
    * identifier = "Base Types 2::LegislationLevelValue"
    european
    international
    national
    sub-national
  }
  Attributes <<dataType>> "BASE2_SimpleGeographicalName" {
    * tableName = "BASE2_SimpleGeographicalName"
    id INTEGER NOT NULL PRIMARY KEY
    language TEXT
    spelling_text TEXT NOT NULL
  }
  Relation "BASE2_RelatedParty_contact" {
    * profile = "attributes"
    * relatedReference = "attribute BASE2_RelatedParty#contact"
    * tableName = "BASE2_RelatedParty_contact"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_RelatedParty(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_Contact(id)
  }
  Relation "BASE2_Contact_address" {
    * profile = "attributes"
    * relatedReference = "attribute BASE2_Contact#address"
    * tableName = "BASE2_Contact_address"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_Contact(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES AD_AddressRepresentation(id)
  }
}
Container "Citation and responsible party information" {
  * fileName = "Citation and responsible party information"
  Constraint Enum <<codeList>> "GMD_CI_DateTypeCode" {
    * identifier = "Citation and responsible party information::CI_DateTypeCode"
    creation
    publication
    revision
  }
}
Container <<applicationSchema>> "Addresses" {
  * fileName = "Addresses"
  Attributes <<dataType>> "AD_AddressRepresentation" {
    * description = "Representation of an address spatial object for use in external application schemas that need to include the basic, address information in a readable way.
  
    NOTE 1 The data type includes the all necessary readable address components as well as the address locator(s), which allows the identification of the address spatial objects, e.g., country, region, municipality, address area, post code, street name and address number. It also includes an optional reference to the full address spatial object.
  
    NOTE 2 The datatype could be used in application schemas that wish to include address information e.g. in a dataset that registers buildings or properties."
    * identifier = "Addresses::AddressRepresentation"
    * tableName = "AD_AddressRepresentation"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<reference>> addressFeature_Address INTEGER
    <<array>> locatorDesignators TEXT
    <<voidable>> postCode TEXT
  }
  Relation "AD_AddressRepresentation_adminUnit" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_adminUnit"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_locatorName" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_locatorName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_addressArea" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_addressArea"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_postName" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_postName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_thoroughfare" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_thoroughfare"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_addressFeature_Address" {
    * profile = "attributes"
    * relatedReference = "attribute AD_AddressRepresentation#addressFeature_Address"
    * tableName = "AD_AddressRepresentation_addressFeature_Address"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
}
Container <<applicationSchema>> "Base Types" {
  * fileName = "Base Types"
  Attributes <<dataType>> "BASE_Identifier" {
    * description = "External unique object identifier published by the responsible body, which may be used by external applications to reference the spatial object.
  
    NOTE1 External object identifiers are distinct from thematic object identifiers.
  
    NOTE 2 The voidable version identifier attribute is not part of the unique identifier of a spatial object and may be used to distinguish two versions of the same spatial object.
  
    NOTE 3 The unique identifier will not change during the life-time of a spatial object."
    * identifier = "Base Types::Identifier"
    * tableName = "BASE_Identifier"
    id INTEGER NOT NULL PRIMARY KEY
    localId TEXT NOT NULL
    namespace TEXT NOT NULL
    <<lifeCycleInfo>>, <<voidable>> versionId TEXT
  }
  Metadata "Unknown" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unknown"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Unpopulated" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unpopulated"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
}
Package "EA Model" {
  Class "applicationSchema" {}
}

