Container <<applicationSchema>> "HabitatsAndBiotopes" {
  * fileName = "HabitatsAndBiotopes"
  Constraint Enum <<codeList>> "HB_ReferenceHabitatTypeSchemeValue" {
    * identifier = "HabitatsAndBiotopes::ReferenceHabitatTypeSchemeValue"
    eunis
    habitatsDirective
    marineStrategyFrameworkDirective
  }
  Attributes <<dataType>> "HB_HabitatTypeCoverType" {
    * description = "Habitat type according to an international, national or local habitat classifications scheme.
  
    Includes additional information on covered area, covered length, or containing volume."
    * identifier = "HabitatsAndBiotopes::HabitatTypeCoverType"
    * tableName = "HB_HabitatTypeCoverType"
    id INTEGER NOT NULL PRIMARY KEY
    localHabitatName_localNameCode TEXT CHECK(HB_LocalNameCodeValue)
    localHabitatName_localScheme TEXT
    referenceHabitatTypeId TEXT NOT NULL CHECK(HB_ReferenceHabitatTypeCodeValue)
    referenceHabitatTypeScheme TEXT NOT NULL CHECK(HB_ReferenceHabitatTypeSchemeValue)
    <<voidable>> areaCovered TEXT
    <<voidable>> areaCovered_uom TEXT CHECK(GML_UomIdentifier)
    <<voidable>> lengthCovered TEXT
    <<voidable>> lengthCovered_uom TEXT CHECK(GML_UomIdentifier)
    <<voidable>> localHabitatName_localName TEXT
    <<voidable>> localHabitatName_qualifierLocalName TEXT CHECK(HB_QualifierLocalNameValue)
    <<voidable>> referenceHabitatTypeName TEXT
    <<voidable>> volumeCovered TEXT
    <<voidable>> volumeCovered_uom TEXT CHECK(GML_UomIdentifier)
  }
  Attributes <<dataType>> "HB_LocalNameType" {
    * description = "Name according to a local classification scheme."
    * identifier = "HabitatsAndBiotopes::LocalNameType"
    * tableName = "HB_LocalNameType"
    id INTEGER NOT NULL PRIMARY KEY
    localNameCode TEXT NOT NULL CHECK(HB_LocalNameCodeValue)
    localScheme TEXT NOT NULL
    <<voidable>> localName TEXT
    <<voidable>> qualifierLocalName TEXT CHECK(HB_QualifierLocalNameValue)
  }
  Constraint Enum <<codeList>> "HB_HabitatsDirectiveCodeValue" {
    * identifier = "HabitatsAndBiotopes::HabitatsDirectiveCodeValue"
  }
  Constraint Enum <<codeList>> "HB_QualifierLocalNameValue" {
    * identifier = "HabitatsAndBiotopes::QualifierLocalNameValue"
    congruent
    excludes
    includedIn
    includes
    overlaps
  }
  Attributes <<dataType>> "HB_HabitatSpeciesType" {
    * description = "Species which occurs in a certain habitat at the time of mapping."
    * identifier = "HabitatsAndBiotopes::HabitatSpeciesType"
    * tableName = "HB_HabitatSpeciesType"
    id INTEGER NOT NULL PRIMARY KEY
    localSpeciesName_localNameCode TEXT CHECK(HB_LocalNameCodeValue)
    localSpeciesName_localScheme TEXT
    referenceSpeciesId TEXT NOT NULL CHECK(SD_ReferenceSpeciesCodeValue)
    referenceSpeciesScheme TEXT NOT NULL CHECK(SD_ReferenceSpeciesSchemeValue)
    <<voidable>> localSpeciesName_localName TEXT
    <<voidable>> localSpeciesName_qualifierLocalName TEXT CHECK(HB_QualifierLocalNameValue)
  }
  Constraint Enum <<codeList>> "HB_MarineStrategyFrameworkDirectiveCodeValue" {
    * identifier = "HabitatsAndBiotopes::MarineStrategyFrameworkDirectiveCodeValue"
  }
  Constraint Enum <<codeList>> "HB_ReferenceHabitatTypeCodeValue" {
    * identifier = "HabitatsAndBiotopes::ReferenceHabitatTypeCodeValue"
  }
  Constraint Enum <<codeList>> "HB_EunisHabitatTypeCodeValue" {
    * identifier = "HabitatsAndBiotopes::EunisHabitatTypeCodeValue"
  }
  Constraint Enum <<codeList>> "HB_LocalNameCodeValue" {
    * identifier = "HabitatsAndBiotopes::LocalNameCodeValue"
  }
  Attributes <<dataType>> "HB_HabitatVegetationType" {
    * description = "Vegetation type which occurs in a certain habitat."
    * identifier = "HabitatsAndBiotopes::HabitatVegetationType"
    * tableName = "HB_HabitatVegetationType"
    id INTEGER NOT NULL PRIMARY KEY
    localVegetationName_localNameCode TEXT NOT NULL CHECK(HB_LocalNameCodeValue)
    localVegetationName_localScheme TEXT NOT NULL
    <<voidable>> localVegetationName_localName TEXT
    <<voidable>> localVegetationName_qualifierLocalName TEXT CHECK(HB_QualifierLocalNameValue)
  }
  Feature <<featureType>> "HB_Habitat" {
    * description = "Geographical areas characterised by specific ecological conditions, processes, structure, and functions that physically support the organisms that live there.
  
    Includes terrestrial and aquatic areas distinguished by geographical, abiotic and biotic features, whether entirely natural or semi-natural [Directive 2007/2/EC].
  
    A Habitat area, line or point may comprise one or more HabitatTypesCoverTypes according to one or more habitat classification schemes, often depending on the data capture process or related to the scale of a map. So a habitat feature might represent a complex of different HabitatTypesCoverTypes.
  
    NOTE Although habitats in principle are geographical areas, they may also be depicted as lines or points."
    * identifier = "HabitatsAndBiotopes::Habitat"
    * tableName = "HB_Habitat"
    geometry GEOMETRY NOT NULL
    id INTEGER NOT NULL PRIMARY KEY
    <<reference>> inspireId INTEGER
  }
  Relation "HB_Habitat_inspireId" {
    * profile = "attributes"
    * relatedReference = "attribute HB_Habitat#inspireId"
    * tableName = "HB_Habitat_inspireId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES HB_Habitat(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "HB_Habitat_habitat" {
    * profile = "attributes"
    * tableName = "HB_Habitat_habitat"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES HB_Habitat(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES HB_HabitatTypeCoverType(id)
  }
  Relation "HB_Habitat_habitatSpecies" {
    * profile = "attributes"
    * tableName = "HB_Habitat_habitatSpecies"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES HB_Habitat(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES HB_HabitatSpeciesType(id)
  }
  Relation "HB_Habitat_habitatVegetation" {
    * profile = "attributes"
    * tableName = "HB_Habitat_habitatVegetation"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES HB_Habitat(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES HB_HabitatVegetationType(id)
  }
}
Container <<applicationSchema>> "SpeciesDistribution" {
  * fileName = "SpeciesDistribution"
  Constraint Enum <<codeList>> "SD_ReferenceSpeciesCodeValue" {
    * identifier = "SpeciesDistribution::ReferenceSpeciesCodeValue"
  }
  Constraint Enum <<codeList>> "SD_ReferenceSpeciesSchemeValue" {
    * identifier = "SpeciesDistribution::ReferenceSpeciesSchemeValue"
    eunis
    eunomen
    natureDirectives
  }
}
Container <<applicationSchema>> "Base Types" {
  * fileName = "Base Types"
  Attributes <<dataType>> "BASE_Identifier" {
    * description = "External unique object identifier published by the responsible body, which may be used by external applications to reference the spatial object.
  
    NOTE1 External object identifiers are distinct from thematic object identifiers.
  
    NOTE 2 The voidable version identifier attribute is not part of the unique identifier of a spatial object and may be used to distinguish two versions of the same spatial object.
  
    NOTE 3 The unique identifier will not change during the life-time of a spatial object."
    * identifier = "Base Types::Identifier"
    * tableName = "BASE_Identifier"
    id INTEGER NOT NULL PRIMARY KEY
    localId TEXT NOT NULL
    namespace TEXT NOT NULL
    <<lifeCycleInfo>>, <<voidable>> versionId TEXT
  }
  Metadata "Unknown" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unknown"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Unpopulated" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unpopulated"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
}
Package "EA Model" {
  Class "applicationSchema" {}
}

Container "Units of Measure" {
  * fileName = "Units of Measure"
  Constraint Enum "GML_UomIdentifier" {}
}
