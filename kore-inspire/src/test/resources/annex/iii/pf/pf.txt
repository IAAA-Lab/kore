Container <<applicationSchema>> "ProductionAndIndustrialFacilities" {
  * fileName = "ProductionAndIndustrialFacilities"
  Constraint Enum <<codeList>> "PF_InstallationTypeValue" {
    * identifier = "ProductionAndIndustrialFacilities::InstallationTypeValue"
  }
  Feature <<featureType>> "PF_ProductionInstallationPart" {
    * description = "A single engineered facility that performs specific functionalities related with a production activity.
  
    This level of description covers specific parts of the Production Installation which must be registered by the legal mandate of the competent authorities. Points of emission as chimneys (for pollutants) or tanks (for special products), will be included in this definition."
    * identifier = "ProductionAndIndustrialFacilities::ProductionInstallationPart"
    * tableName = "PF_ProductionInstallationPart"
    id INTEGER NOT NULL PRIMARY KEY
    pointGeometry POINT
    thematicId_identifier TEXT
    thematicId_identifierScheme TEXT
    <<voidable>>, <<array>> descriptions TEXT
    <<voidable>>, <<array>> names TEXT
    <<reference>> groupingInstallation INTEGER
    <<reference>> inspireId INTEGER
    <<voidable>> technique TEXT CHECK(PF_PollutionAbatementTechniqueValue)
    <<voidable>> type TEXT CHECK(PF_InstallationPartTypeValue)
  }
  Attributes <<dataType>> "PF_StatusType" {
    * description = "The state or condition of a technical component, with regard to the functional and operational order, in which it is arranged for a limited or extended time period.
  
    It applies equally to the technical unit (facility, installation or installation part), to the production site, to the parcel and to the production building."
    * identifier = "ProductionAndIndustrialFacilities::StatusType"
    * tableName = "PF_StatusType"
    id INTEGER NOT NULL PRIMARY KEY
    statusType TEXT NOT NULL CHECK(BASE_ConditionOfFacilityValue)
    <<voidable>> description TEXT
    <<voidable>> validFrom DATE
    <<voidable>> validTo DATE
  }
  Constraint Enum <<codeList>> "PF_RiverBasinDistrictValue" {
    * identifier = "ProductionAndIndustrialFacilities::RiverBasinDistrictValue"
  }
  Constraint Enum <<codeList>> "PF_InstallationPartTypeValue" {
    * identifier = "ProductionAndIndustrialFacilities::InstallationPartTypeValue"
  }
  Class <<code List>> "TypeOfProductionBuildingValue" {
    visibility = "Public"
  }
  Feature <<featureType>> "PF_ProductionBuilding" {
    * description = "Artificial construction, part of the production facility that are useful to host or provide shelter to activity development.
  
    Inside a facility, and in relation with the definition of building, this entity should represent a construction under responsibility of the facility, either as an independent unit or as a functional infrastructure for an installation."
    * identifier = "ProductionAndIndustrialFacilities::ProductionBuilding"
    * tableName = "PF_ProductionBuilding"
    id INTEGER NOT NULL PRIMARY KEY
    thematicId_identifier TEXT
    thematicId_identifierScheme TEXT
    <<voidable>> geometry GEOMETRY
    <<voidable>> typeOfBuilding TypeOfProductionBuildingValue [0..*] as ref
  }
  Abstract Class <<featureType>> "TechnicalUnit" {}
  Feature <<featureType>> "PF_ProductionInstallation" {
    * description = "A technical unit, such as machinery,  apparatus, devices or equipment placed in position or connected for use.
  
    Stationary technical unit part of a facility where one or more activities are carried out, and any other directly associated activities which have a technical connection to the activities carried out on that site and which could have an effect on the environment.
  
    May be a technical unit within an establishment in which dangerous substances are produced, used, handled or stored."
    * identifier = "ProductionAndIndustrialFacilities::ProductionInstallation"
    * tableName = "PF_ProductionInstallation"
    id INTEGER NOT NULL PRIMARY KEY
    pointGeometry POINT
    thematicId_identifier TEXT
    thematicId_identifierScheme TEXT
    <<voidable>>, <<array>> descriptions TEXT
    <<voidable>>, <<array>> names TEXT
    <<reference>> groupingFacility INTEGER
    <<reference>> inspireId INTEGER
    <<voidable>> type TEXT CHECK(PF_InstallationTypeValue)
  }
  Feature <<featureType>> "PF_ProductionSite" {
    * description = "All land at a distinct geographic location where the production facility was, is, or is intended to be located. This includes all infrastructure, equipment and materials;
  
    An area of land or water that one or more process plants is or may be situated on, or else a single location, in which, if there is more than one manufacturer of (a) substance(s), certain infrastructure and facilities are shared.
  
    A continuous surface, maritime or terrestrial in which production facilities have been already implanted or urban and/or engineering activities have been developed for production purposes. The location will be defined by means of geographical boundaries within which activities under the control of an organization may be carried out. The geographical boundaries may be on land and in water, and include above and below surface structures, both natural and man-made."
    * identifier = "ProductionAndIndustrialFacilities::ProductionSite"
    * tableName = "PF_ProductionSite"
    geometry MULTISURFACE
    id INTEGER NOT NULL PRIMARY KEY
    thematicId_identifier TEXT
    thematicId_identifierScheme TEXT
    <<voidable>>, <<array>> descriptions TEXT
    <<voidable>>, <<array>> names TEXT
    <<reference>> inspireId INTEGER
  }
  Feature <<featureType>> "PF_ProductionPlot" {
    * description = "A portion of land or water part of a production facility destined to functional purposes.
  
    A potential sub-division of a major site as delimited extension of land in which are performed extensive operations related with the activity or one of the activities performed by a facility."
    * identifier = "ProductionAndIndustrialFacilities::ProductionPlot"
    * tableName = "PF_ProductionPlot"
    geometry SURFACE
    id INTEGER NOT NULL PRIMARY KEY
    thematicId_identifier TEXT
    thematicId_identifierScheme TEXT
    <<reference>> inspireId INTEGER
  }
  Feature <<featureType>> "PF_ProductionFacility" {
    * description = "One or more installations on the same site operated by the same natural or legal person,
  
    designed, built or installed to serve specific production or industrial purposes, comprehending
  
    all infrastructure, equipment and materials.
  
    A production facility groups together a single installation, set of installations or production processes (stationary or mobile), which can be defined within a single geographical boundary, organizational unit or production process. A production facility can also be identified as one or more installations located on the same site that are operated by the same natural or legal person and in which production activities are being carried out. Such a facility groups potentially the land, buildings, and equipment used in carrying on an industrial business or other undertaking or service."
    * identifier = "ProductionAndIndustrialFacilities::ProductionFacility"
    * tableName = "PF_ProductionFacility"
    geometry GEOMETRY NOT NULL
    id INTEGER NOT NULL PRIMARY KEY
    riverBasinDistrict TEXT CHECK(PF_RiverBasinDistrictValue)
    <<voidable>>, <<lifeCycleInfo>> beginLifespanVersion DATETIME
    <<voidable>>, <<lifeCycleInfo>> endLifespanVersion DATETIME
    <<voidable>>, <<reference>> hostingSite INTEGER
    <<voidable>> name TEXT
    <<voidable>> surfaceGeometry SURFACE
    <<voidable>> validFrom DATETIME
    <<voidable>> validTo DATETIME
    function ACT_CORE_Function [1..*] as ref
    inspireId BASE_Identifier as ref
    thematicId BASE2_ThematicIdentifier [0..*] as ref
  }
  Constraint Enum <<codeList>> "PF_PollutionAbatementTechniqueValue" {
    * identifier = "ProductionAndIndustrialFacilities::PollutionAbatementTechniqueValue"
  }
  Feature <<featureType>> "PF_ProductionInstallationPart_surfaceGeometry" {
    * tableName = "PF_ProductionInstallationPart_surfaceGeometry"
    id INTEGER NOT NULL PRIMARY KEY
    surfaceGeometry SURFACE
  }
  Feature <<featureType>> "PF_ProductionInstallation_surfaceGeometry" {
    * tableName = "PF_ProductionInstallation_surfaceGeometry"
    id INTEGER NOT NULL PRIMARY KEY
    surfaceGeometry SURFACE
  }
  Relation "PF_ProductionInstallationPart_groupingInstallation" {
    * profile = "features"
    * relatedReference = "attribute PF_ProductionInstallationPart#groupingInstallation"
    * tableName = "PF_ProductionInstallationPart_groupingInstallation"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES PF_ProductionInstallationPart(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES PF_ProductionInstallation(id)
  }
  Relation "PF_ProductionInstallationPart_inspireId" {
    * profile = "attributes"
    * relatedReference = "attribute PF_ProductionInstallationPart#inspireId"
    * tableName = "PF_ProductionInstallationPart_inspireId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES PF_ProductionInstallationPart(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "PF_ProductionInstallationPart_status" {
    * profile = "attributes"
    * tableName = "PF_ProductionInstallationPart_status"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES PF_ProductionInstallationPart(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES PF_StatusType(id)
  }
  Relation "PF_ProductionBuilding_groupedFacility" {
    * profile = "features"
    * tableName = "PF_ProductionBuilding_groupedFacility"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES PF_ProductionBuilding(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES PF_ProductionFacility(id)
  }
  Relation "PF_ProductionBuilding_status" {
    * profile = "attributes"
    * tableName = "PF_ProductionBuilding_status"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES PF_ProductionBuilding(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES PF_StatusType(id)
  }
  Relation "PF_ProductionBuilding_building_AbstractBuilding" {
    * profile = "attributes"
    * tableName = "PF_ProductionBuilding_building_AbstractBuilding"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES PF_ProductionBuilding(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "PF_ProductionInstallation_groupingFacility" {
    * profile = "features"
    * relatedReference = "attribute PF_ProductionInstallation#groupingFacility"
    * tableName = "PF_ProductionInstallation_groupingFacility"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES PF_ProductionInstallation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES PF_ProductionFacility(id)
  }
  Relation "PF_ProductionInstallation_inspireId" {
    * profile = "attributes"
    * relatedReference = "attribute PF_ProductionInstallation#inspireId"
    * tableName = "PF_ProductionInstallation_inspireId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES PF_ProductionInstallation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "PF_ProductionInstallation_status" {
    * profile = "attributes"
    * tableName = "PF_ProductionInstallation_status"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES PF_ProductionInstallation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES PF_StatusType(id)
  }
  Relation "PF_ProductionSite_hostedFacility" {
    * profile = "features"
    * relatedReference = "attribute PF_ProductionFacility#hostingSite"
    * tableName = "PF_ProductionSite_hostedFacility"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES PF_ProductionSite(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES PF_ProductionFacility(id)
  }
  Relation "PF_ProductionSite_inspireId" {
    * profile = "attributes"
    * relatedReference = "attribute PF_ProductionSite#inspireId"
    * tableName = "PF_ProductionSite_inspireId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES PF_ProductionSite(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "PF_ProductionSite_sitePlan" {
    * profile = "attributes"
    * tableName = "PF_ProductionSite_sitePlan"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES PF_ProductionSite(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleCitation(id)
  }
  Relation "PF_ProductionSite_status" {
    * profile = "attributes"
    * tableName = "PF_ProductionSite_status"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES PF_ProductionSite(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES PF_StatusType(id)
  }
  Relation "PF_ProductionPlot_groupingFacility" {
    * profile = "features"
    * tableName = "PF_ProductionPlot_groupingFacility"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES PF_ProductionPlot(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES PF_ProductionFacility(id)
  }
  Relation "PF_ProductionPlot_inspireId" {
    * profile = "attributes"
    * relatedReference = "attribute PF_ProductionPlot#inspireId"
    * tableName = "PF_ProductionPlot_inspireId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES PF_ProductionPlot(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "PF_ProductionPlot_status" {
    * profile = "attributes"
    * tableName = "PF_ProductionPlot_status"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES PF_ProductionPlot(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES PF_StatusType(id)
  }
  Relation "PF_ProductionFacility_status" {
    * profile = "attributes"
    * tableName = "PF_ProductionFacility_status"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES PF_ProductionFacility(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES PF_StatusType(id)
  }
}
Container <<applicationSchema>> "Base Types 2" {
  * fileName = "Base Types 2"
  Attributes <<dataType>> "BASE2_ThematicIdentifier" {
    * description = "Thematic identifier to uniquely identify the spatial object.
  
    Some spatial objects may be assigned multiple unique identifiers.
  
    These may have been established to meet data exchange requirements of different reporting obligations at International, European or national levels and/or internal data maintenance requirements."
    * identifier = "Base Types 2::ThematicIdentifier"
    * tableName = "BASE2_ThematicIdentifier"
    id INTEGER NOT NULL PRIMARY KEY
    identifier TEXT NOT NULL
    identifierScheme TEXT NOT NULL
  }
  Constraint Enum <<enumeration>> "BASE2_SimpleCitationType" {
    CI_Citation
    DocumentCitation
    LegislationCitation
  }
  Attributes <<dataType>> "BASE2_SimpleCitation" {
    * tableName = "BASE2_SimpleCitation"
    date DATE
    id INTEGER NOT NULL PRIMARY KEY
    level LegislationLevelValue
    link TEXT
    name TEXT NOT NULL
    type TEXT NOT NULL CHECK(BASE2_SimpleCitationType)
  }
}
Container <<applicationSchema>> "Base Types" {
  * fileName = "Base Types"
  Constraint Enum <<codeList>> "BASE_ConditionOfFacilityValue" {
    * identifier = "Base Types::ConditionOfFacilityValue"
    decommissioned
    disused
    functional
    projected
    underConstruction
  }
  Attributes <<dataType>> "BASE_Identifier" {
    * description = "External unique object identifier published by the responsible body, which may be used by external applications to reference the spatial object.
  
    NOTE1 External object identifiers are distinct from thematic object identifiers.
  
    NOTE 2 The voidable version identifier attribute is not part of the unique identifier of a spatial object and may be used to distinguish two versions of the same spatial object.
  
    NOTE 3 The unique identifier will not change during the life-time of a spatial object."
    * identifier = "Base Types::Identifier"
    * tableName = "BASE_Identifier"
    id INTEGER NOT NULL PRIMARY KEY
    localId TEXT NOT NULL
    namespace TEXT NOT NULL
    <<lifeCycleInfo>>, <<voidable>> versionId TEXT
  }
  Metadata "Unknown" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unknown"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Unpopulated" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unpopulated"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
}
Container <<applicationSchema>> "Activity Complex" {
  * fileName = "Activity Complex"
  Attributes <<dataType>> "ACT_CORE_Function" {
    * description = "The function of something expressed as an activity and optional input and/or output.
  
    NOTE  Depending on the scope it can refer to different activities (co-incineration, Collection, exploration, incineration, interim disposal, management, recycling, primary production, primary treatment, recovery , recycling, release, storage, use, waste management, etc) and Inputs and Outputs (sludge, substance, tailings, technical products, urban waste water, volatile organic compound, waste, WEEE from private households, etc)."
    * identifier = "Activity Complex::Function"
    * tableName = "ACT_CORE_Function"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<array>> inputs TEXT
    <<voidable>>, <<array>> outputs TEXT
    <<array>> activities TEXT NOT NULL
  }
  Constraint Enum <<codeList>> "ACT_CORE_EconomicActivityValue" {
    * identifier = "Activity Complex::EconomicActivityValue"
  }
  Constraint Enum <<codeList>> "ACT_CORE_InputOutputValue" {
    * identifier = "Activity Complex::InputOutputValue"
  }
}
Package "EA Model" {
  Class "applicationSchema" {}
  Datatype LegislationLevelValue
  
}

