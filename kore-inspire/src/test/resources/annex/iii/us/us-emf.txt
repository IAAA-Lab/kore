Container <<applicationSchema>> "Environmental Management Facilities" {
  * fileName = "Environmental Management Facilities"
  Attributes <<featureType>> "US_EMF_EnvironmentalManagementFacility" {
    * description = "A physical structure designed, built or installed to serve specific functions in relation to environmental material flows, such as waste or waste water flows, or a delimitable area of land or water used to serve such functions.
  
    EXAMPLE In the context of waste management the "specific function" may be a waste recovery or disposal operation. Typically, waste management sites and waste management installations (such as incineration plants, landfills or storages) get distinguished. Multiple waste management installations may be found at the same site. Waste management installations can be a part of other waste management installations.
  
    The functions considered for the Environmental Facilities Theme fall mainly under the NACE rev. 2 category E "Water supply; Sewerage; Waste management and remediation activities"."
    * identifier = "Environmental Management Facilities::EnvironmentalManagementFacility"
    * tableName = "US_EMF_EnvironmentalManagementFacility"
    geometry : GEOMETRY
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<lifeCycleInfo>> beginLifespanVersion : DATETIME [0..1]
    <<voidable>>, <<lifeCycleInfo>> endLifespanVersion : DATETIME [0..1]
    <<voidable>>, <<reference>> facilityDescription INTEGER
    <<voidable>>, <<array>> types TEXT
    <<voidable>> name : TEXT [0..1]
    <<voidable>> status TEXT CHECK(BASE_ConditionOfFacilityValue)
    <<voidable>> validFrom : DATETIME [0..1]
    <<voidable>> validTo : DATETIME [0..1]
    function ACT_CORE_Function [1..*] as ref
    inspireId BASE_Identifier as ref
    thematicId BASE2_ThematicIdentifier [0..*] as ref
  }
  Constraint Enum <<codeList>> "US_EMF_EnvironmentalManagementFacilityTypeValue" {
    * identifier = "Environmental Management Facilities::EnvironmentalManagementFacilityTypeValue"
  }
  Relation "US_EMF_EnvironmentalManagementFacility_parentFacility" {
    * profile = "attributes"
    * tableName = "US_EMF_EnvironmentalManagementFacility_parentFacility"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES US_EMF_EnvironmentalManagementFacility(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES US_EMF_EnvironmentalManagementFacility(id)
  }
  Relation "US_EMF_EnvironmentalManagementFacility_facilityDescription" {
    * profile = "attributes"
    * relatedReference = "attribute US_EMF_EnvironmentalManagementFacility#facilityDescription"
    * tableName = "US_EMF_EnvironmentalManagementFacility_facilityDescription"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES US_EMF_EnvironmentalManagementFacility(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES ACT_CORE_ActivityComplexDescription(id)
  }
  Relation "US_EMF_EnvironmentalManagementFacility_physicalCapacity" {
    * profile = "attributes"
    * tableName = "US_EMF_EnvironmentalManagementFacility_physicalCapacity"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES US_EMF_EnvironmentalManagementFacility(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES ACT_CORE_Capacity(id)
  }
  Relation "US_EMF_EnvironmentalManagementFacility_permission" {
    * profile = "attributes"
    * tableName = "US_EMF_EnvironmentalManagementFacility_permission"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES US_EMF_EnvironmentalManagementFacility(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES ACT_CORE_Permission(id)
  }
}
Container <<applicationSchema>> "Base Types" {
  * fileName = "Base Types"
  Constraint Enum <<codeList>> "BASE_ConditionOfFacilityValue" {
    * identifier = "Base Types::ConditionOfFacilityValue"
    decommissioned
    disused
    functional
    projected
    underConstruction
  }
  Attributes <<dataType>> "BASE_Identifier" {
    * description = "External unique object identifier published by the responsible body, which may be used by external applications to reference the spatial object.
  
    NOTE1 External object identifiers are distinct from thematic object identifiers.
  
    NOTE 2 The voidable version identifier attribute is not part of the unique identifier of a spatial object and may be used to distinguish two versions of the same spatial object.
  
    NOTE 3 The unique identifier will not change during the life-time of a spatial object."
    * identifier = "Base Types::Identifier"
    * tableName = "BASE_Identifier"
    id INTEGER NOT NULL PRIMARY KEY
    localId TEXT NOT NULL
    namespace TEXT NOT NULL
    <<lifeCycleInfo>>, <<voidable>> versionId TEXT
  }
  Metadata "Unknown" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unknown"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Unpopulated" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unpopulated"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
}
Container <<applicationSchema>> "Activity Complex" {
  * fileName = "Activity Complex"
  Attributes <<dataType>> "ACT_CORE_InputOutputAmount" {
    * description = "Type and, where available, measurable amount of a classified or registered material that enters or leaves a technical and economical unit.
  
    NOTE Depending on the thematic scope it can refer to different terms as Biomass, Bio-Waste, Fuel, Organic Solvents, Waste Water, Waste for disposal or recovery, Primary Materials, etc."
    * identifier = "Activity Complex::InputOutputAmount"
    * tableName = "ACT_CORE_InputOutputAmount"
    amount_unitOfMeasure_formula TEXT
    amount_unitOfMeasure_measureType TEXT NOT NULL CHECK(GML_MeasureType)
    amount_unitOfMeasure_nameStandardUnit TEXT
    amount_unitOfMeasure_offsetToStandardUnit DOUBLE
    amount_unitOfMeasure_scaleToStandardUnit DOUBLE
    amount_unitOfMeasure_uomName TEXT NOT NULL
    amount_unitOfMeasure_uomSymbol TEXT NOT NULL
    amount_value TEXT NOT NULL
    id INTEGER NOT NULL PRIMARY KEY
    inputOutput TEXT NOT NULL CHECK(ACT_CORE_InputOutputValue)
  }
  Attributes <<dataType>> "ACT_CORE_Function" {
    * description = "The function of something expressed as an activity and optional input and/or output.
  
    NOTE  Depending on the scope it can refer to different activities (co-incineration, Collection, exploration, incineration, interim disposal, management, recycling, primary production, primary treatment, recovery , recycling, release, storage, use, waste management, etc) and Inputs and Outputs (sludge, substance, tailings, technical products, urban waste water, volatile organic compound, waste, WEEE from private households, etc)."
    * identifier = "Activity Complex::Function"
    * tableName = "ACT_CORE_Function"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<array>> inputs TEXT
    <<voidable>>, <<array>> outputs TEXT
    <<array>> activities TEXT NOT NULL
  }
  Attributes <<dataType>> "ACT_CORE_ActivityComplexDescription" {
    * description = "Additional information about an activity complex, including its description, address, contact and related parties."
    * identifier = "Activity Complex::ActivityComplexDescription"
    * tableName = "ACT_CORE_ActivityComplexDescription"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<reference>> address INTEGER
    <<voidable>>, <<reference>> contact INTEGER
  }
  Attributes <<dataType>> "ACT_CORE_Capacity" {
    * description = "A quantification of an actual or potential ability to perform an activity, that typically does not change, does not change often, or does not change to a significant degree.
  
    NOTE  Capacity could refer depending of the thematic scope to different concepts included on the legislation as “emission limits”, “capacity incineration”, “livestock units”, “nominal capacity”, “objective estimation data”, “rate of desulphurization” or “recycling rate”."
    * identifier = "Activity Complex::Capacity"
    * tableName = "ACT_CORE_Capacity"
    id INTEGER NOT NULL PRIMARY KEY
    time TEXT
    time_uom TEXT CHECK(GML_UomIdentifier)
    <<array>> activities TEXT NOT NULL
  }
  Constraint Enum <<codeList>> "ACT_CORE_EconomicActivityValue" {
    * identifier = "Activity Complex::EconomicActivityValue"
  }
  Attributes <<dataType>> "ACT_CORE_Permission" {
    * description = "Official Decision (formal consent) granting authorization to operate all or part of an Activity Complex, subject to certain conditions which guarantee that the installations or parts of installations on the same site operated by the same operator comply with the requirements fixed by a competent authority. A permit may cover one or more functions and fix parameters of capacity. The term could be extended to other kind of certificates or documents of special relevance depending of the scope (e.g. ISO, EMAS, National Quality Standards, etc).
  
    The term may be extended to other kind of certificates or documents of special relevance depending of the scope (e.g. ISO, EMAS, National Quality Standards, etc).
  
    NOTE This terms is referred in several legislative acts as &ldquo;permit&rdquo; , &ldquo;authorization&rdquo;, &ldquo;development consent&rdquo; or &ldquo;exploration permit&rdquo; among others.
  
    EXAMPLE 1 &ldquo;&hellip;a [written] decision by which the competent authority grants permission to operate all or part of an installation&rdquo; ;
  
    EXAMPLE 2 &ldquo;.. the decision of the competent authority or authorities which entitles the developer to proceed with the project..&rdquo;."
    * identifier = "Activity Complex::Permission"
    * tableName = "ACT_CORE_Permission"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>> dateFrom DATETIME
    <<voidable>> dateTo DATETIME
    <<voidable>> decisionDate DATETIME
  }
  Constraint Enum <<codeList>> "ACT_CORE_InputOutputValue" {
    * identifier = "Activity Complex::InputOutputValue"
  }
  Relation "ACT_CORE_ActivityComplexDescription_address" {
    * profile = "attributes"
    * relatedReference = "attribute ACT_CORE_ActivityComplexDescription#address"
    * tableName = "ACT_CORE_ActivityComplexDescription_address"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES ACT_CORE_ActivityComplexDescription(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES AD_AddressRepresentation(id)
  }
  Relation "ACT_CORE_ActivityComplexDescription_contact" {
    * profile = "attributes"
    * relatedReference = "attribute ACT_CORE_ActivityComplexDescription#contact"
    * tableName = "ACT_CORE_ActivityComplexDescription_contact"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES ACT_CORE_ActivityComplexDescription(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_Contact(id)
  }
  Relation "ACT_CORE_ActivityComplexDescription_relatedParty" {
    * profile = "attributes"
    * tableName = "ACT_CORE_ActivityComplexDescription_relatedParty"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES ACT_CORE_ActivityComplexDescription(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_RelatedParty(id)
  }
  Relation "ACT_CORE_Capacity_input" {
    * profile = "attributes"
    * tableName = "ACT_CORE_Capacity_input"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES ACT_CORE_Capacity(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES ACT_CORE_InputOutputAmount(id)
  }
  Relation "ACT_CORE_Capacity_output" {
    * profile = "attributes"
    * tableName = "ACT_CORE_Capacity_output"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES ACT_CORE_Capacity(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES ACT_CORE_InputOutputAmount(id)
  }
  Relation "ACT_CORE_Permission_Id" {
    * profile = "attributes"
    * tableName = "ACT_CORE_Permission_Id"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES ACT_CORE_Permission(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_ThematicIdentifier(id)
  }
  Relation "ACT_CORE_Permission_relatedParty" {
    * profile = "attributes"
    * tableName = "ACT_CORE_Permission_relatedParty"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES ACT_CORE_Permission(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_RelatedParty(id)
  }
  Relation "ACT_CORE_Permission_permittedFunction" {
    * profile = "attributes"
    * tableName = "ACT_CORE_Permission_permittedFunction"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES ACT_CORE_Permission(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES ACT_CORE_Function(id)
  }
  Relation "ACT_CORE_Permission_permittedCapacity" {
    * profile = "attributes"
    * tableName = "ACT_CORE_Permission_permittedCapacity"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES ACT_CORE_Permission(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES ACT_CORE_Capacity(id)
  }
}
Container <<applicationSchema>> "Base Types 2" {
  * fileName = "Base Types 2"
  Attributes <<dataType>> "BASE2_Contact" {
    * description = "Communication channels by which it is possible to gain access to someone or something."
    * identifier = "Base Types 2::Contact"
    * tableName = "BASE2_Contact"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<reference>> address INTEGER
    <<voidable>>, <<array>> telephoneFacsimiles TEXT
    <<voidable>>, <<array>> telephoneVoices TEXT
    <<voidable>> electronicMailAddress TEXT
    <<voidable>> website TEXT
  }
  Constraint Enum <<codeList>> "BASE2_PartyRoleValue" {
    * identifier = "Base Types 2::PartyRoleValue"
  }
  Attributes <<dataType>> "BASE2_RelatedParty" {
    * description = "An organisation or a person with a role related to a resource.
  
    NOTE 1 A party, typically an individual person, acting as a general point of contact for a resource can be specified without providing any particular role."
    * identifier = "Base Types 2::RelatedParty"
    * tableName = "BASE2_RelatedParty"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<reference>> contact INTEGER
    <<voidable>>, <<array>> roles TEXT
  }
  Attributes <<dataType>> "BASE2_ThematicIdentifier" {
    * description = "Thematic identifier to uniquely identify the spatial object.
  
    Some spatial objects may be assigned multiple unique identifiers.
  
    These may have been established to meet data exchange requirements of different reporting obligations at International, European or national levels and/or internal data maintenance requirements."
    * identifier = "Base Types 2::ThematicIdentifier"
    * tableName = "BASE2_ThematicIdentifier"
    id INTEGER NOT NULL PRIMARY KEY
    identifier TEXT NOT NULL
    identifierScheme TEXT NOT NULL
  }
  Attributes <<dataType>> "BASE2_SimpleGeographicalName" {
    * tableName = "BASE2_SimpleGeographicalName"
    id INTEGER NOT NULL PRIMARY KEY
    language TEXT
    spelling_text TEXT NOT NULL
  }
  Relation "BASE2_Contact_address" {
    * profile = "attributes"
    * relatedReference = "attribute BASE2_Contact#address"
    * tableName = "BASE2_Contact_address"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_Contact(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES AD_AddressRepresentation(id)
  }
  Relation "BASE2_RelatedParty_contact" {
    * profile = "attributes"
    * relatedReference = "attribute BASE2_RelatedParty#contact"
    * tableName = "BASE2_RelatedParty_contact"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_RelatedParty(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_Contact(id)
  }
}
Container "Units of Measure" {
  * fileName = "Units of Measure"
  Constraint Enum <<codeList>> "GML_MeasureType" {
    * identifier = "Units of Measure::MeasureType"
    angle
    area
    length
    scale
    time
    velocity
    volume
    weight
  }
  Constraint Enum "GML_UomIdentifier" {}
}
Container <<applicationSchema>> "Addresses" {
  * fileName = "Addresses"
  Attributes <<dataType>> "AD_AddressRepresentation" {
    * description = "Representation of an address spatial object for use in external application schemas that need to include the basic, address information in a readable way.
  
    NOTE 1 The data type includes the all necessary readable address components as well as the address locator(s), which allows the identification of the address spatial objects, e.g., country, region, municipality, address area, post code, street name and address number. It also includes an optional reference to the full address spatial object.
  
    NOTE 2 The datatype could be used in application schemas that wish to include address information e.g. in a dataset that registers buildings or properties."
    * identifier = "Addresses::AddressRepresentation"
    * tableName = "AD_AddressRepresentation"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<reference>> addressFeature_Address INTEGER
    <<array>> locatorDesignators TEXT
    <<voidable>> postCode TEXT
  }
  Relation "AD_AddressRepresentation_adminUnit" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_adminUnit"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_locatorName" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_locatorName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_addressArea" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_addressArea"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_postName" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_postName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_thoroughfare" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_thoroughfare"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_addressFeature_Address" {
    * profile = "attributes"
    * relatedReference = "attribute AD_AddressRepresentation#addressFeature_Address"
    * tableName = "AD_AddressRepresentation_addressFeature_Address"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
}
Package "EA Model" {
  Class "applicationSchema" {}
}

