Container <<applicationSchema>> "Energy Resources Coverage" {
  * fileName = "Energy Resources Coverage"
  Constraint Enum <<codeList>> "ER_C_WindPotentialValue" {
    * identifier = "Energy Resources Coverage::WindPotentialValue"
    averageMeanWindPowerDensity
    averageMeanWindSpeed
  }
  Abstract Constraint Enum <<codeList>> "ER_C_PotentialTypeValue" {
    * identifier = "Energy Resources Coverage::PotentialTypeValue"
  }
  Constraint Enum <<codeList>> "ER_C_TidalPotentialValue" {
    * identifier = "Energy Resources Coverage::TidalPotentialValue"
    averagePeakFlow
    averageTidalPower
    meanNeapTidalPower
    meanNeapTidalRange
    meanNeapTidePeakFlow
    meanSpringTidalPower
    meanSpringTidalRange
    meanSpringTidePeakFlow
  }
  Constraint Enum <<codeList>> "ER_C_HydroPotentialValue" {
    * identifier = "Energy Resources Coverage::HydroPotentialValue"
    potentialHydroPower
  }
  Attributes <<featureType>> "ER_C_RenewableAndWastePotentialCoverage" {
    * description = "Function that returns an energy potential value from its range for any direct position within its spatial, temporal or spatio-temporal domain.
  
    SOURCE Adapted from "Coverage" [ISO 19123:2005]."
    * identifier = "Energy Resources Coverage::RenewableAndWastePotentialCoverage"
    * tableName = "ER_C_RenewableAndWastePotentialCoverage"
    coverageFunction_ruleDefinition TEXT
    coverageFunction_ruleReference TEXT
    id INTEGER NOT NULL PRIMARY KEY
    metadata _Any
    potentialType TEXT NOT NULL CHECK(ER_C_PotentialTypeValue)
    rangeSet _Any
    typeOfResource TEXT NOT NULL CHECK(ER_B_RenewableAndWasteValue)
    verticalExtent_verticalExtent_range_upperBound TEXT
    verticalExtent_verticalExtent_range_upperBound_uom TEXT CHECK(GML_UomIdentifier)
    verticalExtent_verticalExtent_scalar TEXT
    verticalExtent_verticalExtent_scalar_uom TEXT CHECK(GML_UomIdentifier)
    verticalExtent_verticalReference TEXT CHECK(ER_B_VerticalReferenceValue)
    <<voidable>>, <<lifeCycleInfo>> beginLifespanVersion DATETIME
    <<voidable>>, <<lifeCycleInfo>> endLifespanVersion DATETIME
    <<voidable>> assessmentMethod_date DATE
    <<voidable>> assessmentMethod_level LegislationLevelValue
    <<voidable>> assessmentMethod_link TEXT
    <<voidable>> assessmentMethod_name TEXT
    <<voidable>> assessmentMethod_type TEXT CHECK(BASE2_SimpleCitationType)
    <<reference>> coverageFunction_gridFunction INTEGER
    <<reference>> domainSet INTEGER
    <<reference>> inspireId INTEGER
    <<voidable>> name TEXT
    <<reference>> rangeType INTEGER
    <<voidable>> verticalExtent_verticalExtent_range_lowerBound TEXT
    <<voidable>> verticalExtent_verticalExtent_range_lowerBound_uom TEXT CHECK(GML_UomIdentifier)
    domainExtent EX_Extent [1..*] as ref
  }
  Constraint Enum <<codeList>> "ER_C_SolarPotentialValue" {
    * identifier = "Energy Resources Coverage::SolarPotentialValue"
    diffuseIrradiance
    diffuseIrradiation
    directNormalIrradiance
    directNormalIrradiation
    globalHorizontalIrradiance
    globalHorizontalIrradiation
  }
  Constraint Enum <<codeList>> "ER_C_GeothermalPotentialValue" {
    * identifier = "Energy Resources Coverage::GeothermalPotentialValue"
    geothermalGradient
    temperature
  }
  Relation "ER_C_RenewableAndWastePotentialCoverage_inspireId" {
    * profile = "attributes"
    * relatedReference = "attribute ER_C_RenewableAndWastePotentialCoverage#inspireId"
    * tableName = "ER_C_RenewableAndWastePotentialCoverage_inspireId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES ER_C_RenewableAndWastePotentialCoverage(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "ER_C_RenewableAndWastePotentialCoverage_domainSet" {
    * profile = "attributes"
    * relatedReference = "attribute ER_C_RenewableAndWastePotentialCoverage#domainSet"
    * tableName = "ER_C_RenewableAndWastePotentialCoverage_domainSet"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES ER_C_RenewableAndWastePotentialCoverage(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES _Any(id)
  }
  Relation "ER_C_RenewableAndWastePotentialCoverage_rangeSet" {
    * profile = "attributes"
    * tableName = "ER_C_RenewableAndWastePotentialCoverage_rangeSet"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES ER_C_RenewableAndWastePotentialCoverage(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES _Any(id)
  }
  Relation "ER_C_RenewableAndWastePotentialCoverage_coverageFunction_gridFunction" {
    * profile = "attributes"
    * relatedReference = "attribute ER_C_RenewableAndWastePotentialCoverage#coverageFunction_gridFunction"
    * tableName = "ER_C_RenewableAndWastePotentialCoverage_coverageFunction_gridFunction"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES ER_C_RenewableAndWastePotentialCoverage(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES GMLCOV_GridFunction(id)
  }
  Relation "ER_C_RenewableAndWastePotentialCoverage_metadata" {
    * profile = "attributes"
    * tableName = "ER_C_RenewableAndWastePotentialCoverage_metadata"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES ER_C_RenewableAndWastePotentialCoverage(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES _Any(id)
  }
  Relation "ER_C_RenewableAndWastePotentialCoverage_rangeType" {
    * profile = "attributes"
    * relatedReference = "attribute ER_C_RenewableAndWastePotentialCoverage#rangeType"
    * tableName = "ER_C_RenewableAndWastePotentialCoverage_rangeType"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES ER_C_RenewableAndWastePotentialCoverage(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES _RecordType(id)
  }
}
Container <<applicationSchema>> "Base Types 2" {
  * fileName = "Base Types 2"
  Constraint Enum <<enumeration>> "BASE2_SimpleCitationType" {
    CI_Citation
    DocumentCitation
    LegislationCitation
  }
}
Container <<applicationSchema>> "Energy Resources Base" {
  * fileName = "Energy Resources Base"
  Constraint Enum <<codeList>> "ER_B_RenewableAndWasteValue" {
    * identifier = "Energy Resources Base::RenewableAndWasteValue"
    biogas
    geothermal
    hydro
    industrialWaste
    liquidBiofuels
    municipalSolidWaste
    solarPhotovoltaic
    solarThermal
    solidBiomass
    tideWaveOcean
    wind
  }
  Constraint Enum <<codeList>> "ER_B_VerticalReferenceValue" {
    * identifier = "Energy Resources Base::VerticalReferenceValue"
    groundLevel
    lowestAstronomicalTide
    meanSeaLevel
    seafloor
  }
}
Container "Quadrilateral Grid" {
  * fileName = "Quadrilateral Grid"
  Constraint Enum <<codeList>> "CIS_CV_SequenceType" {
    * identifier = "Quadrilateral Grid::CV_SequenceType"
    CantorDiagonal
    Hilbert
    Morton
    boustrophedonic
    linear
    spiral
  }
}
Container "Data quality information" {
  * fileName = "Data quality information"
  Constraint Enum <<codeList>> "GMD_DQ_EvaluationMethodTypeCode" {
    * identifier = "Data quality information::DQ_EvaluationMethodTypeCode"
    directExternal
    directInternal
    indirect
  }
}
Container "Records and Class Metadata" {
  * fileName = "Records and Class Metadata"
  Attributes <<type>>, <<type>> "_Any" {
    * description = "<UsedBy>
  
    <NameSpace>ISO 19103 Conceptual Schema Language</NameSpace>
  
    <Class>Record</Class>
  
    <Package>Records and Class Metadata</Package>
  
    <Operation>locate</Operation>
  
    <Parameter>Return</Parameter>
  
    <Type>Any</Type>
  
    <UsedBy>"
    * identifier = "Records and Class Metadata::Any"
    * tableName = "_Any"
    id INTEGER NOT NULL PRIMARY KEY
  }
  Attributes <<type>>, <<type>> "_Type" {
    * description = "Type is used here for as a generic concept for any metalanguage description of an object class."
    * identifier = "Records and Class Metadata::Type"
    * tableName = "_Type"
    id INTEGER NOT NULL PRIMARY KEY
    typeName_aName TEXT NOT NULL
    schema Schema [0..*] as ref
  }
  Attributes <<type>>, <<type>> "_RecordType" {
    * description = "A RecordType is a look up mechanism that associates AttributeNames to TypeNames. AttributeNames are locally mapped. TypeNames are most often either primitives, or other types in the same schema as this record. Because the RecordType can control the structure of a set of Records, it is essentially a metaclass for that set of records view as a class.
  
    A RecordType is a NameSpace for its included attributeTypes."
    * identifier = "Records and Class Metadata::RecordType"
    * tableName = "_RecordType"
    id INTEGER NOT NULL PRIMARY KEY
    typeName_aName TEXT NOT NULL
    <<reference>> memberType INTEGER
    record Record [0..*] as ref
    schema Schema [0..*] as ref
  }
  Relation "_RecordType_memberType" {
    * profile = "attributes"
    * relatedReference = "attribute _RecordType#memberType"
    * tableName = "_RecordType_memberType"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES _RecordType(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES _Type(id)
  }
}
Container <<applicationSchema>> "Base Types" {
  * fileName = "Base Types"
  Attributes <<dataType>> "BASE_Identifier" {
    * description = "External unique object identifier published by the responsible body, which may be used by external applications to reference the spatial object.
  
    NOTE1 External object identifiers are distinct from thematic object identifiers.
  
    NOTE 2 The voidable version identifier attribute is not part of the unique identifier of a spatial object and may be used to distinguish two versions of the same spatial object.
  
    NOTE 3 The unique identifier will not change during the life-time of a spatial object."
    * identifier = "Base Types::Identifier"
    * tableName = "BASE_Identifier"
    id INTEGER NOT NULL PRIMARY KEY
    localId TEXT NOT NULL
    namespace TEXT NOT NULL
    <<lifeCycleInfo>>, <<voidable>> versionId TEXT
  }
  Metadata "Unknown" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unknown"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Unpopulated" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unpopulated"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
}
Package "EA Model" {
  Class "applicationSchema" {}
  Datatype LegislationLevelValue
  
}

Package "Extent information" {
  Class "EX_Extent" {
    RationalRose$Java:ConstructorIs = "public"
    RationalRose$Java:Final = "False"
    RationalRose$Java:GenerateDefaultConstructor = "True"
    RationalRose$Java:GenerateFinalizer = "False"
    RationalRose$Java:GenerateInstanceInitializer = "False"
    RationalRose$Java:GenerateStaticInitializer = "False"
    RationalRose$Oracle8:CollectionOfREFS = "False"
    RationalRose$Visual Basic:CollectionClass = "Collection"
    RationalRose$Visual Basic:Creatable = "(221)"
    RationalRose$Visual Basic:GenerateInitialization = "False"
    RationalRose$Visual Basic:GenerateTermination = "False"
    RationalRose$Visual Basic:OptionBase = "(none)"
    RationalRose$Visual Basic:OptionCompare = "(none)"
    RationalRose$Visual Basic:OptionExplicit = "True"
    description : TEXT [0..1]
    geographicElement_EX_GeographicExtent BASE_Identifier [0..*] as ref
  }
}
Container <<applicationSchema>> "Coverages (Domain and Range)" {
  * fileName = "Coverages (Domain and Range)"
  Attributes <<dataType>> "GMLCOV_GridFunction" {
    * description = "An explicit mapping rule for grid geometries"
    * identifier = "Coverages (Domain and Range)::GridFunction"
    * tableName = "GMLCOV_GridFunction"
    id INTEGER NOT NULL PRIMARY KEY
    sequenceRule_scanDirection <<missing>>
    sequenceRule_type TEXT CHECK(CIS_CV_SequenceType) DEFAULT 'linear'
    <<array>> startPoints TEXT
  }
}
Container "Units of Measure" {
  * fileName = "Units of Measure"
  Constraint Enum "GML_UomIdentifier" {}
}
