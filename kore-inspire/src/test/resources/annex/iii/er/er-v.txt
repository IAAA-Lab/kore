Container <<applicationSchema>> "Energy Resources Vector" {
  * fileName = "Energy Resources Vector"
  Attributes <<dataType>> "ER_V_CalorificRangeType" {
    * description = "Value indicating the upper and lower bounds of the calorific range of the energy resource."
    * identifier = "Energy Resources Vector::CalorificRangeType"
    * tableName = "ER_V_CalorificRangeType"
    id INTEGER NOT NULL PRIMARY KEY
    lowerBound TEXT NOT NULL
    lowerBound_uom TEXT NOT NULL CHECK(GML_UomIdentifier)
    upperBound TEXT NOT NULL
    upperBound_uom TEXT NOT NULL CHECK(GML_UomIdentifier)
  }
  Attributes <<dataType>> "ER_V_FossilFuelMeasure" {
    * description = "Amount of resources according to the specific categorisation."
    * identifier = "Energy Resources Vector::FossilFuelMeasure"
    * tableName = "ER_V_FossilFuelMeasure"
    amount TEXT NOT NULL
    amount_uom TEXT NOT NULL CHECK(GML_UomIdentifier)
    dateOfDetermination_anyOther_indeterminatePosition TEXT CHECK(TRS_TM_IndeterminateValue)
    dateOfDetermination_date8601 DATE
    dateOfDetermination_dateTime8601 DATETIME
    dateOfDetermination_time8601 TEXT
    dateOfDetermination_time8601_uom TEXT CHECK(GML_UomIdentifier)
    id INTEGER NOT NULL PRIMARY KEY
    resourceClass TEXT NOT NULL CHECK(ER_B_FossilFuelClassValue)
  }
  Attributes <<dataType>> "ER_V_FossilFuelResourceType" {
    * description = "Type and amount of resource according to specific categorisation."
    * identifier = "Energy Resources Vector::FossilFuelResourceType"
    * tableName = "ER_V_FossilFuelResourceType"
    calorificValue_calorificRange_lowerBound TEXT
    calorificValue_calorificRange_lowerBound_uom TEXT CHECK(GML_UomIdentifier)
    calorificValue_calorificRange_upperBound TEXT
    calorificValue_calorificRange_upperBound_uom TEXT CHECK(GML_UomIdentifier)
    id INTEGER NOT NULL PRIMARY KEY
    typeOfResource TEXT NOT NULL CHECK(ER_B_FossilFuelValue)
    <<voidable>> calorificValue_calorificScalar TEXT
    <<voidable>> calorificValue_calorificScalar_uom TEXT CHECK(GML_UomIdentifier)
  }
  Attributes <<featureType>> "ER_V_RenewableAndWasteResource" {
    * description = "A spatial object defining an inferred or observable spatial extent of a resource that can be, or has been used as a source of renewable energy or waste.
  
    <font color="#222226">Renewable energy is energy that is naturally occurring and theoretically inexhausatable that is not derived from fossil or nuclear fuel. Waste is a fuel that may consist of many materials coming from combustible industrial, institutional, hospital and household wastes such as rubber, plastics, waste fossil oils and other similar commodities. It is either solid or liquid in form, renewable or non-renewable, biodegradable or non-biodegradable.</font>"
    * identifier = "Energy Resources Vector::RenewableAndWasteResource"
    * tableName = "ER_V_RenewableAndWasteResource"
    ClassificationAndQuantificationFramework TEXT CHECK(ER_B_ClassificationAndQuantificationFrameworkValue)
    dateOfDetermination_anyOther_indeterminatePosition TEXT CHECK(TRS_TM_IndeterminateValue)
    geometry GEOMETRY NOT NULL
    id INTEGER NOT NULL PRIMARY KEY
    typeOfResource TEXT NOT NULL CHECK(ER_B_RenewableAndWasteValue)
    verticalExtent_verticalExtent_range_upperBound TEXT
    verticalExtent_verticalExtent_range_upperBound_uom TEXT CHECK(GML_UomIdentifier)
    verticalExtent_verticalExtent_scalar TEXT
    verticalExtent_verticalExtent_scalar_uom TEXT CHECK(GML_UomIdentifier)
    verticalExtent_verticalReference TEXT CHECK(ER_B_VerticalReferenceValue)
    <<lifeCycleInfo>>, <<voidable>> beginLifespanVersion DATETIME
    <<lifeCycleInfo>>, <<voidable>> endLifespanVersion DATETIME
    <<voidable>> Capacity TEXT
    <<voidable>> Capacity_uom TEXT CHECK(GML_UomIdentifier)
    <<voidable>> dateOfDetermination_date8601 DATE
    <<voidable>> dateOfDetermination_dateTime8601 DATETIME
    <<voidable>> dateOfDetermination_time8601 TEXT
    <<voidable>> dateOfDetermination_time8601_uom TEXT CHECK(GML_UomIdentifier)
    <<voidable>> verticalExtent_verticalExtent_range_lowerBound TEXT
    <<voidable>> verticalExtent_verticalExtent_range_lowerBound_uom TEXT CHECK(GML_UomIdentifier)
    inspireId BASE_Identifier as ref
    <<voidable>> exploitationPeriod ER_V_ExploitationPeriodType [0..*] as ref
    <<voidable>> reportingAuthority BASE2_RelatedParty [0..*] as ref
    <<voidable>> resourceName BASE2_SimpleGeographicalName [0..*] as ref
  }
  Attributes <<featureType>> "ER_V_FossilFuelResource" {
    * description = "A spatial object defining an inferred or observable spatial extent of a resource that can be, or has been used as a source of fossil fuel energy.  The most common fossil fuel types are coal, natural gas and crude oil.
  
    <font color="#222226">Solid fossil fuels are those non-renewable hydrocarbon energy resources that are naturally found in the solid state i.e. coals and peat. Hydrocarbons cover various types of natural gas and petroleum resources.</font>"
    * identifier = "Energy Resources Vector::FossilFuelResource"
    * tableName = "ER_V_FossilFuelResource"
    ClassificationAndQuantificationFramework TEXT CHECK(ER_B_ClassificationAndQuantificationFrameworkValue)
    dateOfDiscovery_anyOther_indeterminatePosition TEXT CHECK(TRS_TM_IndeterminateValue)
    geometry GEOMETRY NOT NULL
    id INTEGER NOT NULL PRIMARY KEY
    verticalExtent_verticalExtent_range_upperBound TEXT
    verticalExtent_verticalExtent_range_upperBound_uom TEXT CHECK(GML_UomIdentifier)
    verticalExtent_verticalExtent_scalar TEXT
    verticalExtent_verticalExtent_scalar_uom TEXT CHECK(GML_UomIdentifier)
    verticalExtent_verticalReference TEXT CHECK(ER_B_VerticalReferenceValue)
    <<lifeCycleInfo>>, <<voidable>> beginLifespanVersion DATETIME
    <<lifeCycleInfo>>, <<voidable>> endLifespanVersion DATETIME
    <<voidable>> dateOfDiscovery_date8601 DATE
    <<voidable>> dateOfDiscovery_dateTime8601 DATETIME
    <<voidable>> dateOfDiscovery_time8601 TEXT
    <<voidable>> dateOfDiscovery_time8601_uom TEXT CHECK(GML_UomIdentifier)
    <<voidable>> verticalExtent_verticalExtent_range_lowerBound TEXT
    <<voidable>> verticalExtent_verticalExtent_range_lowerBound_uom TEXT CHECK(GML_UomIdentifier)
    inspireId BASE_Identifier as ref
    <<voidable>> exploitationPeriod ER_V_ExploitationPeriodType [0..*] as ref
    <<voidable>> reportingAuthority BASE2_RelatedParty [0..*] as ref
    <<voidable>> resourceName BASE2_SimpleGeographicalName [0..*] as ref
  }
  Abstract Class <<featureType>> "VectorEnergyResource" {
    ClassificationAndQuantificationFramework TEXT CHECK(ER_B_ClassificationAndQuantificationFrameworkValue)
    geometry GEOMETRY NOT NULL
    verticalExtent_verticalExtent_range_upperBound TEXT
    verticalExtent_verticalExtent_range_upperBound_uom TEXT CHECK(GML_UomIdentifier)
    verticalExtent_verticalExtent_scalar TEXT
    verticalExtent_verticalExtent_scalar_uom TEXT CHECK(GML_UomIdentifier)
    verticalExtent_verticalReference TEXT CHECK(ER_B_VerticalReferenceValue)
    <<lifeCycleInfo>>, <<voidable>> beginLifespanVersion DATETIME
    <<lifeCycleInfo>>, <<voidable>> endLifespanVersion DATETIME
    <<voidable>> verticalExtent_verticalExtent_range_lowerBound TEXT
    <<voidable>> verticalExtent_verticalExtent_range_lowerBound_uom TEXT CHECK(GML_UomIdentifier)
    inspireId BASE_Identifier as ref
    <<voidable>> exploitationPeriod ER_V_ExploitationPeriodType [0..*] as ref
    <<voidable>> reportingAuthority BASE2_RelatedParty [0..*] as ref
    <<voidable>> resourceName BASE2_SimpleGeographicalName [0..*] as ref
  }
  Attributes <<dataType>> "ER_V_ExploitationPeriodType" {
    * description = "The exploitationPeriod defines the start and, if applicable, the end date of the exploitation or application."
    * identifier = "Energy Resources Vector::ExploitationPeriodType"
    * tableName = "ER_V_ExploitationPeriodType"
    beginTime_anyOther_indeterminatePosition TEXT CHECK(TRS_TM_IndeterminateValue)
    beginTime_date8601 DATE
    beginTime_dateTime8601 DATETIME
    beginTime_time8601 TEXT
    beginTime_time8601_uom TEXT CHECK(GML_UomIdentifier)
    endTime_anyOther_indeterminatePosition TEXT CHECK(TRS_TM_IndeterminateValue)
    endTime_date8601 DATE
    endTime_dateTime8601 DATETIME
    endTime_time8601 TEXT
    endTime_time8601_uom TEXT CHECK(GML_UomIdentifier)
    id INTEGER NOT NULL PRIMARY KEY
  }
  Class <<union>> "CalorificValueType" {
    calorificRange_lowerBound : TEXT
    calorificRange_lowerBound_uom : TEXT
    calorificRange_upperBound : TEXT
    calorificRange_upperBound_uom : TEXT
    calorificScalar : TEXT
    calorificScalar_uom : TEXT
  }
  Relation "ER_V_FossilFuelResourceType_quantity" {
    * profile = "attributes"
    * tableName = "ER_V_FossilFuelResourceType_quantity"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES ER_V_FossilFuelResourceType(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES ER_V_FossilFuelMeasure(id)
  }
  Relation "ER_V_FossilFuelResource_resource" {
    * profile = "attributes"
    * tableName = "ER_V_FossilFuelResource_resource"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES ER_V_FossilFuelResource(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES ER_V_FossilFuelResourceType(id)
  }
}
Container "Temporal Reference System" {
  * fileName = "Temporal Reference System"
  Constraint Enum <<enumeration>> "TRS_TM_IndeterminateValue" {
    * identifier = "Temporal Reference System::TM_IndeterminateValue"
    after
    before
    name
    now
    unknow
  }
}
Container <<applicationSchema>> "Energy Resources Base" {
  * fileName = "Energy Resources Base"
  Constraint Enum <<codeList>> "ER_B_ClassificationAndQuantificationFrameworkValue" {
    * identifier = "Energy Resources Base::ClassificationAndQuantificationFrameworkValue"
    NPD
    PERC
    RF
    SPE/WPC/AAPG(PRMS)
    UNFC1997
    UNFC2004
    UNFC2009
    USGS
  }
  Constraint Enum <<codeList>> "ER_B_FossilFuelClassValue" {
    * identifier = "Energy Resources Base::FossilFuelClassValue"
    contingentResources
    provenReserves
    resourcesInitiallyInPlace
  }
  Constraint Enum <<codeList>> "ER_B_RenewableAndWasteValue" {
    * identifier = "Energy Resources Base::RenewableAndWasteValue"
    biogas
    geothermal
    hydro
    industrialWaste
    liquidBiofuels
    municipalSolidWaste
    solarPhotovoltaic
    solarThermal
    solidBiomass
    tideWaveOcean
    wind
  }
  Constraint Enum <<codeList>> "ER_B_VerticalReferenceValue" {
    * identifier = "Energy Resources Base::VerticalReferenceValue"
    groundLevel
    lowestAstronomicalTide
    meanSeaLevel
    seafloor
  }
  Constraint Enum <<codeList>> "ER_B_FossilFuelValue" {
    * identifier = "Energy Resources Base::FossilFuelValue"
    crudeOil
    hardCoal
    lowRankCoal
    naturalGas
    naturalGasLiquids
    oilSands
    oilShales
    peat
  }
}
Container <<applicationSchema>> "Base Types 2" {
  * fileName = "Base Types 2"
  Attributes <<dataType>> "BASE2_Contact" {
    * description = "Communication channels by which it is possible to gain access to someone or something."
    * identifier = "Base Types 2::Contact"
    * tableName = "BASE2_Contact"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<reference>> address INTEGER
    <<voidable>>, <<array>> telephoneFacsimiles TEXT
    <<voidable>>, <<array>> telephoneVoices TEXT
    <<voidable>> electronicMailAddress TEXT
    <<voidable>> website TEXT
  }
  Constraint Enum <<codeList>> "BASE2_PartyRoleValue" {
    * identifier = "Base Types 2::PartyRoleValue"
  }
  Attributes <<dataType>> "BASE2_RelatedParty" {
    * description = "An organisation or a person with a role related to a resource.
  
    NOTE 1 A party, typically an individual person, acting as a general point of contact for a resource can be specified without providing any particular role."
    * identifier = "Base Types 2::RelatedParty"
    * tableName = "BASE2_RelatedParty"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<reference>> contact INTEGER
    <<voidable>>, <<array>> roles TEXT
  }
  Attributes <<dataType>> "BASE2_SimpleGeographicalName" {
    * tableName = "BASE2_SimpleGeographicalName"
    id INTEGER NOT NULL PRIMARY KEY
    language TEXT
    spelling_text TEXT NOT NULL
  }
  Constraint Enum <<codeList>> "BASE2_Locale" {}
  Attributes <<type>> "BASE2_SimpleLocalisedCharacterString" {
    * tableName = "BASE2_SimpleLocalisedCharacterString"
    id INTEGER NOT NULL PRIMARY KEY
    locale TEXT NOT NULL CHECK(BASE2_Locale)
    value TEXT NOT NULL
  }
  Relation "BASE2_RelatedParty_individualName" {
    * profile = "attributes"
    * tableName = "BASE2_RelatedParty_individualName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_RelatedParty(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleLocalisedCharacterString(id)
  }
  Relation "BASE2_RelatedParty_organisationName" {
    * profile = "attributes"
    * tableName = "BASE2_RelatedParty_organisationName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_RelatedParty(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleLocalisedCharacterString(id)
  }
  Relation "BASE2_RelatedParty_positionName" {
    * profile = "attributes"
    * tableName = "BASE2_RelatedParty_positionName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_RelatedParty(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleLocalisedCharacterString(id)
  }
  Relation "BASE2_RelatedParty_contact" {
    * profile = "attributes"
    * relatedReference = "attribute BASE2_RelatedParty#contact"
    * tableName = "BASE2_RelatedParty_contact"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_RelatedParty(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_Contact(id)
  }
  Relation "BASE2_Contact_address" {
    * profile = "attributes"
    * relatedReference = "attribute BASE2_Contact#address"
    * tableName = "BASE2_Contact_address"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_Contact(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES AD_AddressRepresentation(id)
  }
  Relation "BASE2_Contact_contactInstructions" {
    * profile = "attributes"
    * tableName = "BASE2_Contact_contactInstructions"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_Contact(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleLocalisedCharacterString(id)
  }
  Relation "BASE2_Contact_hoursOfService" {
    * profile = "attributes"
    * tableName = "BASE2_Contact_hoursOfService"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_Contact(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleLocalisedCharacterString(id)
  }
}
Container <<applicationSchema>> "Addresses" {
  * fileName = "Addresses"
  Attributes <<dataType>> "AD_AddressRepresentation" {
    * description = "Representation of an address spatial object for use in external application schemas that need to include the basic, address information in a readable way.
  
    NOTE 1 The data type includes the all necessary readable address components as well as the address locator(s), which allows the identification of the address spatial objects, e.g., country, region, municipality, address area, post code, street name and address number. It also includes an optional reference to the full address spatial object.
  
    NOTE 2 The datatype could be used in application schemas that wish to include address information e.g. in a dataset that registers buildings or properties."
    * identifier = "Addresses::AddressRepresentation"
    * tableName = "AD_AddressRepresentation"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<reference>> addressFeature_Address INTEGER
    <<array>> locatorDesignators TEXT
    <<voidable>> postCode TEXT
  }
  Relation "AD_AddressRepresentation_adminUnit" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_adminUnit"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_locatorName" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_locatorName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_addressArea" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_addressArea"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_postName" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_postName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_thoroughfare" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_thoroughfare"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_addressFeature_Address" {
    * profile = "attributes"
    * relatedReference = "attribute AD_AddressRepresentation#addressFeature_Address"
    * tableName = "AD_AddressRepresentation_addressFeature_Address"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
}
Container <<applicationSchema>> "Base Types" {
  * fileName = "Base Types"
  Attributes <<dataType>> "BASE_Identifier" {
    * description = "External unique object identifier published by the responsible body, which may be used by external applications to reference the spatial object.
  
    NOTE1 External object identifiers are distinct from thematic object identifiers.
  
    NOTE 2 The voidable version identifier attribute is not part of the unique identifier of a spatial object and may be used to distinguish two versions of the same spatial object.
  
    NOTE 3 The unique identifier will not change during the life-time of a spatial object."
    * identifier = "Base Types::Identifier"
    * tableName = "BASE_Identifier"
    id INTEGER NOT NULL PRIMARY KEY
    localId TEXT NOT NULL
    namespace TEXT NOT NULL
    <<lifeCycleInfo>>, <<voidable>> versionId TEXT
  }
  Metadata "Unknown" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unknown"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Unpopulated" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unpopulated"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
}
Package "EA Model" {
  Class "applicationSchema" {}
}

Container "Units of Measure" {
  * fileName = "Units of Measure"
  Constraint Enum "GML_UomIdentifier" {}
}
