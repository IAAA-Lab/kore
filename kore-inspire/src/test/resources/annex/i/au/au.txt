Container <<applicationSchema>> "AdministrativeUnits" {
  * fileName = "AdministrativeUnits"
  Constraint Enum <<enumeration>> "AU_TechnicalStatusValue" {
    * identifier = "AdministrativeUnits::TechnicalStatusValue"
    edgeMatched
    notEdgeMatched
  }
  Feature <<featureType>> "AU_AdministrativeBoundary" {
    * description = "A line of demarcation between administrative units."
    * identifier = "AdministrativeUnits::AdministrativeBoundary"
    * tableName = "AU_AdministrativeBoundary"
    country TEXT NOT NULL CHECK(BASE2_CountryCode)
    geometry CURVE NOT NULL
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<lifeCycleInfo>> beginLifespanVersion DATETIME
    <<voidable>>, <<lifeCycleInfo>> endLifespanVersion DATETIME
    <<reference>> inspireId INTEGER
    <<voidable>> legalStatus TEXT CHECK(AU_LegalStatusValue) DEFAULT 'agreed'
    <<array>> nationalLevels TEXT NOT NULL
    <<voidable>> technicalStatus TEXT CHECK(AU_TechnicalStatusValue) DEFAULT 'edgeMatched'
  }
  Feature <<featureType>> "AU_AdministrativeUnit" {
    * description = "Unit of administration where a Member State has and/or exercises jurisdictional rights, for local, regional and national governance."
    * identifier = "AdministrativeUnits::AdministrativeUnit"
    * tableName = "AU_AdministrativeUnit"
    country TEXT NOT NULL CHECK(BASE2_CountryCode)
    geometry MULTISURFACE NOT NULL
    id INTEGER NOT NULL PRIMARY KEY
    nationalCode TEXT NOT NULL
    nationalLevel TEXT NOT NULL CHECK(AU_AdministrativeHierarchyLevel)
    <<voidable>>, <<lifeCycleInfo>> beginLifespanVersion DATETIME
    <<voidable>>, <<lifeCycleInfo>> endLifespanVersion DATETIME
    <<voidable>>, <<reference>> upperLevelUnit INTEGER
    <<reference>> inspireId INTEGER
  }
  Constraint Enum <<codeList>> "AU_AdministrativeHierarchyLevel" {
    * identifier = "AdministrativeUnits::AdministrativeHierarchyLevel"
    1stOrder
    2ndOrder
    3rdOrder
    4thOrder
    5thOrder
    6thOrder
  }
  Feature <<featureType>> "AU_Condominium" {
    * description = "An administrative area established independently to any national administrative division of territory  and administered by two or more countries.
  
    NOTE Condominium is not a part of any national administrative hierarchy of territory division in Member State."
    * identifier = "AdministrativeUnits::Condominium"
    * tableName = "AU_Condominium"
    geometry MULTISURFACE NOT NULL
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<lifeCycleInfo>> beginLifespanVersion DATETIME
    <<voidable>>, <<lifeCycleInfo>> endLifespanVersion DATETIME
    <<reference>> inspireId INTEGER
  }
  Feature <<dataType>> "AU_ResidenceOfAuthority" {
    * description = "Data type representing the name and position of a residence of authority."
    * identifier = "AdministrativeUnits::ResidenceOfAuthority"
    * tableName = "AU_ResidenceOfAuthority"
    id INTEGER NOT NULL PRIMARY KEY
    name_language TEXT
    name_spelling_text TEXT NOT NULL
    <<voidable>> geometry POINT
  }
  Constraint Enum <<enumeration>> "AU_LegalStatusValue" {
    * identifier = "AdministrativeUnits::LegalStatusValue"
    agreed
    notAgreed
  }
  Relation "AU_boundary_admUnit" {
    * profile = "features"
    * tableName = "AU_boundary_admUnit"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AU_AdministrativeBoundary(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES AU_AdministrativeUnit(id)
  }
  Relation "AU_AdministrativeBoundary_inspireId" {
    * profile = "attributes"
    * relatedReference = "attribute AU_AdministrativeBoundary#inspireId"
    * tableName = "AU_AdministrativeBoundary_inspireId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AU_AdministrativeBoundary(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "AU_AdministrativeUnit_administeredBy" {
    * profile = "features"
    * tableName = "AU_AdministrativeUnit_administeredBy"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AU_AdministrativeUnit(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES AU_AdministrativeUnit(id)
  }
  Relation "AU_AdministrativeUnit_lowerLevelUnit" {
    * profile = "features"
    * relatedReference = "attribute AU_AdministrativeUnit#upperLevelUnit"
    * tableName = "AU_AdministrativeUnit_lowerLevelUnit"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AU_AdministrativeUnit(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES AU_AdministrativeUnit(id)
  }
  Relation "AU_AdministrativeUnit_inspireId" {
    * profile = "attributes"
    * relatedReference = "attribute AU_AdministrativeUnit#inspireId"
    * tableName = "AU_AdministrativeUnit_inspireId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AU_AdministrativeUnit(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "AU_AdministrativeUnit_name" {
    * profile = "attributes"
    * tableName = "AU_AdministrativeUnit_name"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AU_AdministrativeUnit(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AU_AdministrativeUnit_nationalLevelName" {
    * profile = "attributes"
    * tableName = "AU_AdministrativeUnit_nationalLevelName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AU_AdministrativeUnit(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleLocalisedCharacterString(id)
  }
  Relation "AU_AdministrativeUnit_residenceOfAuthority" {
    * profile = "features"
    * tableName = "AU_AdministrativeUnit_residenceOfAuthority"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AU_AdministrativeUnit(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES AU_ResidenceOfAuthority(id)
  }
  Relation "AU_Condominium_admUnit" {
    * profile = "features"
    * tableName = "AU_Condominium_admUnit"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AU_Condominium(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES AU_AdministrativeUnit(id)
  }
  Relation "AU_Condominium_inspireId" {
    * profile = "attributes"
    * relatedReference = "attribute AU_Condominium#inspireId"
    * tableName = "AU_Condominium_inspireId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AU_Condominium(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "AU_Condominium_name" {
    * profile = "attributes"
    * tableName = "AU_Condominium_name"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AU_Condominium(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
}
Container <<applicationSchema>> "Base Types 2" {
  * fileName = "Base Types 2"
  Constraint Enum <<codeList>> "BASE2_CountryCode" {
    * identifier = "Base Types 2::CountryCode"
    AT
    BE
    BG
    CY
    CZ
    DE
    DK
    EE
    EL
    ES
    FI
    FR
    HR
    HU
    IE
    IT
    LT
    LU
    LV
    MT
    NL
    PL
    PT
    RO
    SE
    SI
    SK
    TR
    UK
  }
  Attributes <<dataType>> "BASE2_SimpleGeographicalName" {
    * tableName = "BASE2_SimpleGeographicalName"
    id INTEGER NOT NULL PRIMARY KEY
    language TEXT
    spelling_text TEXT NOT NULL
  }
  Constraint Enum <<codeList>> "BASE2_Locale" {}
  Attributes <<type>> "BASE2_SimpleLocalisedCharacterString" {
    * tableName = "BASE2_SimpleLocalisedCharacterString"
    id INTEGER NOT NULL PRIMARY KEY
    locale TEXT NOT NULL CHECK(BASE2_Locale)
    value TEXT NOT NULL
  }
}
Container <<applicationSchema>> "Base Types" {
  * fileName = "Base Types"
  Attributes <<dataType>> "BASE_Identifier" {
    * description = "External unique object identifier published by the responsible body, which may be used by external applications to reference the spatial object.
  
    NOTE1 External object identifiers are distinct from thematic object identifiers.
  
    NOTE 2 The voidable version identifier attribute is not part of the unique identifier of a spatial object and may be used to distinguish two versions of the same spatial object.
  
    NOTE 3 The unique identifier will not change during the life-time of a spatial object."
    * identifier = "Base Types::Identifier"
    * tableName = "BASE_Identifier"
    id INTEGER NOT NULL PRIMARY KEY
    localId TEXT NOT NULL
    namespace TEXT NOT NULL
    <<lifeCycleInfo>>, <<voidable>> versionId TEXT
  }
  Metadata "Unknown" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unknown"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Unpopulated" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unpopulated"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
}
Package "EA Model" {
  Class "applicationSchema" {}
}

