Container <<applicationSchema>> "MaritimeUnits" {
  * fileName = "MaritimeUnits"
  Feature <<featureType>> "MU_MaritimeBoundary" {
    * description = "A line depicting the separation of any type of maritime jurisdiction.
  
    SOURCE IHO Dictionary, S-32, Fifth Edition.
  
    NOTE 1 Maritime boundary represents either:
  
    1) the seaward outer limits of the maritime zones of a coastal State, such as territorial sea, contiguous zone, exclusive economic zone and continental shelf;
  
    2) the limits of the maritime zones of States with opposite or adjacent coasts.
  
    Maritime boundaries are a politically sensitive subject, because it affects coastal State's jurisdiction concerning fishery, petroleum and other resources of the sea as well as other uses of the sea. [Source: "Maritime Boundary", S.P. Jagota]"
    * identifier = "MaritimeUnits::MaritimeBoundary"
    * tableName = "MU_MaritimeBoundary"
    geometry CURVE NOT NULL
    id INTEGER NOT NULL PRIMARY KEY
    <<lifeCycleInfo>> beginLifespanVersion DATETIME NOT NULL
    <<array>> countries TEXT NOT NULL
    <<lifeCycleInfo>> endLifespanVersion DATETIME
    <<reference>> inspireId INTEGER
    <<voidable>> legalStatus TEXT CHECK(AU_LegalStatusValue)
    <<voidable>> technicalStatus TEXT CHECK(AU_TechnicalStatusValue)
  }
  Constraint Enum <<codeList>> "MU_MaritimeZoneTypeValue" {
    * identifier = "MaritimeUnits::MaritimeZoneTypeValue"
    contiguousZone
    continentalShelf
    exclusiveEconomicZone
    internalWaters
    territorialSea
  }
  Feature <<dataType>> "MU_BaselineSegment" {
    * description = "Segment of the baseline from which the outer limits of the territorial sea and certain other outer limits are measured."
    * identifier = "MaritimeUnits::BaselineSegment"
    * tableName = "MU_BaselineSegment"
    geometry CURVE NOT NULL
    id INTEGER NOT NULL PRIMARY KEY
    segmentType TEXT NOT NULL CHECK(MU_BaselineSegmentTypeValue)
  }
  Attributes <<featureType>> "MU_Baseline" {
    * description = "The line from which the outer limits of the territorial sea and certain other outer limits are measured.
  
    SOURCE IHO Dictionary, S-32, Fifth Edition.
  
    NOTE The baseline comprises of one or more baseline segments.
  
    According to United Nations Convention on the Law of the Sea (UNCLOS), the baseline segment can be normal, straight or archipelagic depending on the method used to determine the baseline segment.
  
    COMMENT: For this moment there is no clearly identified use-case that would require Baseline spatial object types, therefore it is not strictly necessary to include these objects in the dataset."
    * identifier = "MaritimeUnits::Baseline"
    * tableName = "MU_Baseline"
    id INTEGER NOT NULL PRIMARY KEY
    <<lifeCycleInfo>> beginLifespanVersion DATETIME NOT NULL
    <<lifeCycleInfo>> endLifespanVersion DATETIME
    <<reference>> inspireId INTEGER
  }
  Constraint Enum <<codeList>> "MU_BaselineSegmentTypeValue" {
    * identifier = "MaritimeUnits::BaselineSegmentTypeValue"
    archipelagic
    normal
    straight
  }
  Feature <<featureType>> "MU_MaritimeZone" {
    * description = "A belt of sea defined by international treaties and conventions, where coastal State executes jurisdictional rights.
  
    NOTE 1 The zone is established for e.g. cadastral, administrative, economic, security or safety purposes. It is not established for environmental management or regulation, which is covered by the theme Area management/restriction/regulation zones and reporting areas, or for environmental protection, which is covered by the theme Protected sites.
  
    NOTE 2 The maritime zone can be either internal waters, territorial sea, contiguous zone, exclusive economic zone or continental shelf."
    * identifier = "MaritimeUnits::MaritimeZone"
    * tableName = "MU_MaritimeZone"
    country TEXT NOT NULL CHECK(BASE2_CountryCode)
    geometry MULTISURFACE NOT NULL
    id INTEGER NOT NULL PRIMARY KEY
    zoneType TEXT NOT NULL CHECK(MU_MaritimeZoneTypeValue)
    <<lifeCycleInfo>>, <<voidable>> beginLifeSpanVersion DATETIME
    <<lifeCycleInfo>>, <<voidable>> endLifepanVersion DATETIME
    <<reference>> inspireId INTEGER
  }
  Relation "MU_MaritimeBoundary_inspireId" {
    * profile = "attributes"
    * relatedReference = "attribute MU_MaritimeBoundary#inspireId"
    * tableName = "MU_MaritimeBoundary_inspireId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES MU_MaritimeBoundary(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "MU_Baseline_segment" {
    * profile = "features"
    * tableName = "MU_Baseline_segment"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES MU_Baseline(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES MU_BaselineSegment(id)
  }
  Relation "MU_Baseline_inspireId" {
    * profile = "attributes"
    * relatedReference = "attribute MU_Baseline#inspireId"
    * tableName = "MU_Baseline_inspireId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES MU_Baseline(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "MU_MaritimeZone_boundary" {
    * profile = "features"
    * tableName = "MU_MaritimeZone_boundary"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES MU_MaritimeZone(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES MU_MaritimeBoundary(id)
  }
  Relation "MU_MaritimeZone_baseline" {
    * profile = "attributes"
    * tableName = "MU_MaritimeZone_baseline"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES MU_MaritimeZone(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES MU_Baseline(id)
  }
  Relation "MU_MaritimeZone_inspireId" {
    * profile = "attributes"
    * relatedReference = "attribute MU_MaritimeZone#inspireId"
    * tableName = "MU_MaritimeZone_inspireId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES MU_MaritimeZone(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "MU_MaritimeZone_name" {
    * profile = "attributes"
    * tableName = "MU_MaritimeZone_name"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES MU_MaritimeZone(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "MU_MaritimeZone_baseline_Shoreline" {
    * profile = "attributes"
    * tableName = "MU_MaritimeZone_baseline_Shoreline"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES MU_MaritimeZone(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "MU_MaritimeZone_seaArea_SeaArea" {
    * profile = "attributes"
    * tableName = "MU_MaritimeZone_seaArea_SeaArea"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES MU_MaritimeZone(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "MU_MaritimeZone_sea_Sea" {
    * profile = "attributes"
    * tableName = "MU_MaritimeZone_sea_Sea"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES MU_MaritimeZone(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
}
Container <<applicationSchema>> "AdministrativeUnits" {
  * fileName = "AdministrativeUnits"
  Constraint Enum <<enumeration>> "AU_TechnicalStatusValue" {
    * identifier = "AdministrativeUnits::TechnicalStatusValue"
    edgeMatched
    notEdgeMatched
  }
  Constraint Enum <<enumeration>> "AU_LegalStatusValue" {
    * identifier = "AdministrativeUnits::LegalStatusValue"
    agreed
    notAgreed
  }
}
Container <<applicationSchema>> "Base Types 2" {
  * fileName = "Base Types 2"
  Constraint Enum <<codeList>> "BASE2_CountryCode" {
    * identifier = "Base Types 2::CountryCode"
    AT
    BE
    BG
    CY
    CZ
    DE
    DK
    EE
    EL
    ES
    FI
    FR
    HR
    HU
    IE
    IT
    LT
    LU
    LV
    MT
    NL
    PL
    PT
    RO
    SE
    SI
    SK
    TR
    UK
  }
  Attributes <<dataType>> "BASE2_SimpleGeographicalName" {
    * tableName = "BASE2_SimpleGeographicalName"
    id INTEGER NOT NULL PRIMARY KEY
    language TEXT
    spelling_text TEXT NOT NULL
  }
}
Container <<applicationSchema>> "Base Types" {
  * fileName = "Base Types"
  Attributes <<dataType>> "BASE_Identifier" {
    * description = "External unique object identifier published by the responsible body, which may be used by external applications to reference the spatial object.
  
    NOTE1 External object identifiers are distinct from thematic object identifiers.
  
    NOTE 2 The voidable version identifier attribute is not part of the unique identifier of a spatial object and may be used to distinguish two versions of the same spatial object.
  
    NOTE 3 The unique identifier will not change during the life-time of a spatial object."
    * identifier = "Base Types::Identifier"
    * tableName = "BASE_Identifier"
    id INTEGER NOT NULL PRIMARY KEY
    localId TEXT NOT NULL
    namespace TEXT NOT NULL
    <<lifeCycleInfo>>, <<voidable>> versionId TEXT
  }
  Metadata "Unknown" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unknown"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Unpopulated" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unpopulated"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
}
Package "EA Model" {
  Class "applicationSchema" {}
}

