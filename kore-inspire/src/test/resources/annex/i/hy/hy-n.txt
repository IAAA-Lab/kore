Container <<applicationSchema>> "Hydro - Network" {
  * fileName = "Hydro - Network"
  Attributes <<featureType>> "HY_N_WatercourseSeparatedCrossing" {
    * description = "An element in the hydrographic network used to indicate non-interacting crossing of watercourse links separated by level.
  
    NOTE The crossing may legitimately break a no-intersection quality rule."
    * identifier = "Hydro - Network::WatercourseSeparatedCrossing"
    * tableName = "HY_N_WatercourseSeparatedCrossing"
    id INTEGER NOT NULL PRIMARY KEY
    <<lifeCycleInfo>>, <<voidable>> beginLifespanVersion : DATETIME [0..1]
    <<lifeCycleInfo>>, <<voidable>> endLifespanVersion : DATETIME [0..1]
    element_Link BASE_Identifier [2..*] as ref
    inspireId BASE_Identifier [0..1] as ref
    relatedHydroObject_HydroObject BASE_Identifier [0..*] as ref
    <<voidable>> geographicalName BASE2_SimpleGeographicalName [0..*] as ref
    <<voidable>> hydroId HY_HydroIdentifier [0..*] as ref
    <<voidable>> inNetwork_Network BASE_Identifier [0..*] as ref
  }
  Constraint Enum <<codeList>> "HY_N_HydroNodeCategoryValue" {
    * identifier = "Hydro - Network::HydroNodeCategoryValue"
    boundary
    flowConstriction
    flowRegulation
    junction
    outlet
    source
  }
  Attributes <<featureType>> "HY_N_HydroNode" {
    * description = "A node within the hydrographic network.
  
    NOTE May represent a physical confluence, bifurcation/confluence/vanishing point etc, or it may be associated with a hydrographic point of interest or facility."
    * identifier = "Hydro - Network::HydroNode"
    * tableName = "HY_N_HydroNode"
    geometry : POINT
    id INTEGER NOT NULL PRIMARY KEY
    <<lifeCycleInfo>>, <<voidable>> beginLifespanVersion : DATETIME [0..1]
    <<lifeCycleInfo>>, <<voidable>> endLifespanVersion : DATETIME [0..1]
    <<voidable>> hydroNodeCategory TEXT CHECK(HY_N_HydroNodeCategoryValue)
    inspireId BASE_Identifier [0..1] as ref
    relatedHydroObject_HydroObject BASE_Identifier [0..*] as ref
    <<voidable>> geographicalName BASE2_SimpleGeographicalName [0..*] as ref
    <<voidable>> hydroId HY_HydroIdentifier [0..*] as ref
    <<voidable>> inNetwork_Network BASE_Identifier [0..*] as ref
    <<voidable>> spokeEnd_Link BASE_Identifier [0..*] as ref
    <<voidable>> spokeStart_Link BASE_Identifier [0..*] as ref
  }
  Attributes <<featureType>> "HY_N_WatercourseLink" {
    * description = "A segment of a watercourse within a hydrographic network.
  
    NOTE A watercourse link may be fictitious, with no direct correspondence to a real-world object and included only to ensure a closed network.
  
    EXAMPLE Fictitious examples:
  
    - virtual network segment in coastal water area
  
    - virtual network segment in lake area
  
    - virtual network segment in river to connect tributary
  
    - virtual network segment in transitional water area"
    * identifier = "Hydro - Network::WatercourseLink"
    * tableName = "HY_N_WatercourseLink"
    centrelineGeometry : CURVE
    fictitious : BOOLEAN
    id INTEGER NOT NULL PRIMARY KEY
    <<lifeCycleInfo>>, <<voidable>> beginLifespanVersion : DATETIME [0..1]
    <<lifeCycleInfo>>, <<voidable>> endLifespanVersion : DATETIME [0..1]
    <<voidable>> flowDirection TEXT CHECK(NET_LinkDirectionValue)
    <<voidable>> length TEXT
    <<voidable>> length_uom TEXT CHECK(GML_UomIdentifier)
    endNode_Node BASE_Identifier [0..1] as ref
    inspireId BASE_Identifier [0..1] as ref
    relatedHydroObject_HydroObject BASE_Identifier [0..*] as ref
    startNode_Node BASE_Identifier [0..1] as ref
    <<voidable>> geographicalName BASE2_SimpleGeographicalName [0..*] as ref
    <<voidable>> hydroId HY_HydroIdentifier [0..*] as ref
    <<voidable>> inNetwork_Network BASE_Identifier [0..*] as ref
  }
  Attributes <<featureType>> "HY_N_WatercourseLinkSequence" {
    * description = "A sequence of watercourse links representing a non-branching path through a hydrographic network."
    * identifier = "Hydro - Network::WatercourseLinkSequence"
    * tableName = "HY_N_WatercourseLinkSequence"
    id INTEGER NOT NULL PRIMARY KEY
    <<lifeCycleInfo>>, <<voidable>> beginLifespanVersion : DATETIME [0..1]
    <<lifeCycleInfo>>, <<voidable>> endLifespanVersion : DATETIME [0..1]
    inspireId BASE_Identifier [0..1] as ref
    link NET_DirectedLink [1..*] as ref
    relatedHydroObject_HydroObject BASE_Identifier [0..*] as ref
    <<voidable>> geographicalName BASE2_SimpleGeographicalName [0..*] as ref
    <<voidable>> hydroId HY_HydroIdentifier [0..*] as ref
    <<voidable>> inNetwork_Network BASE_Identifier [0..*] as ref
  }
}
Container "basicTypes" {
  * fileName = "basicTypes"
  Constraint Enum <<enumeration>>, <<enumeration>> "GML_Sign" {
    * identifier = "basicTypes::Sign"
    "+"
    "-"
  }
}
Container <<applicationSchema>> "Base Types 2" {
  * fileName = "Base Types 2"
  Constraint Enum <<enumeration>> "BASE2_SimpleCitationType" {
    CI_Citation
    DocumentCitation
    LegislationCitation
  }
  Attributes <<dataType>> "BASE2_SimpleCitation" {
    * tableName = "BASE2_SimpleCitation"
    date DATE
    id INTEGER NOT NULL PRIMARY KEY
    level LegislationLevelValue
    link TEXT
    name TEXT NOT NULL
    type TEXT NOT NULL CHECK(BASE2_SimpleCitationType)
  }
  Attributes <<dataType>> "BASE2_SimpleGeographicalName" {
    * tableName = "BASE2_SimpleGeographicalName"
    id INTEGER NOT NULL PRIMARY KEY
    language TEXT
    spelling_text TEXT NOT NULL
  }
}
Container <<applicationSchema>> "Network" {
  * fileName = "Network"
  Attributes <<dataType>> "NET_DirectedLink" {
    * description = "A link either in its positive or negative direction."
    * identifier = "Network::DirectedLink"
    * tableName = "NET_DirectedLink"
    direction TEXT NOT NULL CHECK(GML_Sign)
    id INTEGER NOT NULL PRIMARY KEY
    <<reference>> link_Link INTEGER
  }
  Constraint Enum <<codeList>> "NET_LinkDirectionValue" {
    * identifier = "Network::LinkDirectionValue"
    bothDirections
    inDirection
    inOppositeDirection
  }
  Relation "NET_DirectedLink_link_Link" {
    * profile = "attributes"
    * relatedReference = "attribute NET_DirectedLink#link_Link"
    * tableName = "NET_DirectedLink_link_Link"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES NET_DirectedLink(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
}
Container <<applicationSchema>> "Base Types" {
  * fileName = "Base Types"
  Attributes <<dataType>> "BASE_Identifier" {
    * description = "External unique object identifier published by the responsible body, which may be used by external applications to reference the spatial object.
  
    NOTE1 External object identifiers are distinct from thematic object identifiers.
  
    NOTE 2 The voidable version identifier attribute is not part of the unique identifier of a spatial object and may be used to distinguish two versions of the same spatial object.
  
    NOTE 3 The unique identifier will not change during the life-time of a spatial object."
    * identifier = "Base Types::Identifier"
    * tableName = "BASE_Identifier"
    id INTEGER NOT NULL PRIMARY KEY
    localId TEXT NOT NULL
    namespace TEXT NOT NULL
    <<lifeCycleInfo>>, <<voidable>> versionId TEXT
  }
  Metadata "Unknown" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unknown"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Unpopulated" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unpopulated"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
}
Container <<applicationSchema>> "Hydro - base" {
  * fileName = "Hydro - base"
  Attributes <<dataType>> "HY_HydroIdentifier" {
    * description = "A hydrographic thematic identifier.
  
    NOTE May be used to hold a national hydrological identification code."
    * identifier = "Hydro - base::HydroIdentifier"
    * tableName = "HY_HydroIdentifier"
    classificationScheme TEXT
    id INTEGER NOT NULL PRIMARY KEY
    localId TEXT NOT NULL
    namespace TEXT NOT NULL
  }
}
Package "Location referencing mechanisms" {
  Class "NodeLocationReference" {
    node_Node BASE_Identifier as ref
    <<voidable>> networkReference BASE2_SimpleCitation [0..1] as ref
  }
}
Package "EA Model" {
  Class "applicationSchema" {}
  Datatype LegislationLevelValue
  
}

Container "Units of Measure" {
  * fileName = "Units of Measure"
  Constraint Enum "GML_UomIdentifier" {}
}
