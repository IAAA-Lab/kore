Container <<applicationSchema>> "Addresses" {
  * fileName = "Addresses"
  isnamespace = "0"
  Constraint Enum <<codeList>> "AD_GeometryMethodValue" {
    * identifier = "Addresses::GeometryMethodValue"
    byAdministrator
    byOtherParty
    fromFeature
  }
  Class <<featureType>> "AddressComponent" {
    <<voidable>>, <<lifeCycleInfo>> beginLifespanVersion : DATETIME [0..1]
    <<voidable>>, <<lifeCycleInfo>> endLifespanVersion : DATETIME [0..1]
    <<voidable>> alternativeIdentifier : TEXT [0..1]
    <<voidable>> status : TEXT [0..1]
    <<voidable>> validFrom : DATETIME [0..1]
    <<voidable>> validTo : DATETIME [0..1]
    inspireId BASE_Identifier [0..1] as ref
  }
  Constraint Enum <<codeList>> "AD_LocatorLevelValue" {
    * identifier = "Addresses::LocatorLevelValue"
    accessLevel
    postalDeliveryPoint
    siteLevel
    unitLevel
  }
  Attributes <<featureType>> "AD_AdminUnitName" {
    * description = "An address component which represents the name of a unit of administration where a Member State has and/or exercises jurisdictional rights, for local, regional and national governance."
    * identifier = "Addresses::AdminUnitName"
    * tableName = "AD_AdminUnitName"
    id INTEGER NOT NULL PRIMARY KEY
    level TEXT NOT NULL CHECK(AU_AdministrativeHierarchyLevel)
    <<voidable>>, <<lifeCycleInfo>> beginLifespanVersion : DATETIME [0..1]
    <<voidable>>, <<lifeCycleInfo>> endLifespanVersion : DATETIME [0..1]
    adminUnit_AdministrativeUnit INTEGER
    <<voidable>> alternativeIdentifier : TEXT [0..1]
    <<voidable>> status : TEXT [0..1]
    <<voidable>> validFrom : DATETIME [0..1]
    <<voidable>> validTo : DATETIME [0..1]
    inspireId BASE_Identifier [0..1] as ref
  }
  Attributes <<featureType>> "AD_ThoroughfareName" {
    * description = "An address component which represents the name of a passage or way through from one location to another.
  
    NOTE 1 A thoroughfare can, e.g., be a road or a waterway
  
    NOTE 2 Thoroughfare names includes names of squares and of cul de sacs, and they can also represent the network of smaller roads or paths e.g. in a small village or settlement."
    * identifier = "Addresses::ThoroughfareName"
    * tableName = "AD_ThoroughfareName"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<lifeCycleInfo>> beginLifespanVersion : DATETIME [0..1]
    <<voidable>>, <<lifeCycleInfo>> endLifespanVersion : DATETIME [0..1]
    <<voidable>> alternativeIdentifier : TEXT [0..1]
    <<voidable>> status : TEXT [0..1]
    <<voidable>> validFrom : DATETIME [0..1]
    <<voidable>> validTo : DATETIME [0..1]
    inspireId BASE_Identifier [0..1] as ref
  }
  Constraint Enum <<codeList>> "AD_LocatorDesignatorTypeValue" {
    * identifier = "Addresses::LocatorDesignatorTypeValue"
    addressIdentifierGeneral
    addressNumber
    addressNumber2ndExtension
    addressNumberExtension
    buildingIdentifier
    buildingIdentifierPrefix
    cornerAddress1stIdentifier
    cornerAddress2ndIdentifier
    entranceDoorIdentifier
    floorIdentifier
    kilometrePoint
    postalDeliveryIdentifier
    staircaseIdentifier
    unitIdentifier
  }
  Attributes <<dataType>> "AD_LocatorName" {
    * description = "Proper noun applied to the real world entity identified by the locator.
  
    NOTE The locator name could be the name of the property or complex, of the building or part of the building, or it could be the name of a room inside a building."
    * identifier = "Addresses::LocatorName"
    * tableName = "AD_LocatorName"
    id INTEGER NOT NULL PRIMARY KEY
    type TEXT NOT NULL CHECK(AD_LocatorNameTypeValue)
  }
  Attributes <<dataType>> "AD_LocatorDesignator" {
    * description = "A number or a sequence of characters that uniquely identifies the locator within the relevant scope(s). The full identification of the locator could include one or more locator designators.
  
    NOTE 1 Locator designators are often assigned according to a set of commonly known rules which enables a user or application to "parse" the information: Address numbers are most often assigned in ascending order with odd and even numbers on each side of the thoroughfare. In a building, the floor identifier represents the level according to the traditions within the area, e.g., 1, 2, 3.
  
    NOTE 2 Several types of locator designators exist, such as: Address number, address number suffix, building identifier, building name. A locator could be composed by an ordered set of these.
  
    EXAMPLE In Paris, France a locator could be composed by two locator designators: address number "18" and address number suffix: "BIS"."
    * identifier = "Addresses::LocatorDesignator"
    * tableName = "AD_LocatorDesignator"
    designator TEXT NOT NULL
    id INTEGER NOT NULL PRIMARY KEY
    type TEXT NOT NULL CHECK(AD_LocatorDesignatorTypeValue)
  }
  Attributes <<dataType>> "AD_ThoroughfareNameValue" {
    * description = "Proper noun applied to thoroughfare optionally including a subdivision of the name into parts.
  
    NOTE 1 The data type allows names in different languages and scripts as well as inclusion of alternative name, alternative spellings, historical name and exonyms.
  
    NOTE 2 The data type allows optionally a representation of the thoroughfare name subdivided into separate, semantic parts e.g. "Avenue" + "de la" + "Poste"."
    * identifier = "Addresses::ThoroughfareNameValue"
    * tableName = "AD_ThoroughfareNameValue"
    id INTEGER NOT NULL PRIMARY KEY
    name_language TEXT
    name_spelling_text TEXT NOT NULL
  }
  Constraint Enum <<codeList>> "AD_StatusValue" {
    * identifier = "Addresses::StatusValue"
    alternative
    current
    proposed
    reserved
    retired
  }
  Constraint Enum <<codeList>> "AD_GeometrySpecificationValue" {
    * identifier = "Addresses::GeometrySpecificationValue"
    addressArea
    adminUnit1stOrder
    adminUnit2ndOrder
    adminUnit3rdOrder
    adminUnit4thOrder
    adminUnit5thOrder
    adminUnit6thOrder
    building
    entrance
    parcel
    postalDelivery
    postalDescriptor
    segment
    thoroughfareAccess
    utilityService
  }
  Constraint Enum <<codeList>> "AD_PartTypeValue" {
    * identifier = "Addresses::PartTypeValue"
    name
    namePrefix
    qualifier
    type
  }
  Constraint Enum <<codeList>> "AD_LocatorNameTypeValue" {
    * identifier = "Addresses::LocatorNameTypeValue"
    buildingName
    descriptiveLocator
    roomName
    siteName
  }
  Attributes <<dataType>> "AD_AddressLocator" {
    * description = "Human readable designator or name that allows a user or application to reference and distinguish the address from neighbour addresses, within the scope of a thoroughfare name, address area name, administrative unit name or postal designator, in which the address is situated.
  
    NOTE 1 The most common locators are designators like an address number, building number or flat identifier as well as the name of the property, complex or building.
  
    NOTE 2 The locator identifier(s) are most often only unambiguous and meaningful within the scope of the adjacent thoroughfare name, address area name or post code.
  
    NOTE 3 The locator could be composed of one or more designators e.g., address number, address number suffix, building number or name, floor number, flat or room identifier. In addition to these common locator types, also narrative or descriptive locators are possible.
  
    NOTE 4 The locators of an address could be composed as a hierarchy, where one level of locators identifies the real property or building while another level of locators identifies the flats or dwellings inside the property.
  
    EXAMPLE 1 In a Spanish city a "site-level" locator could identify a building on the thoroughfare name "Calle Gran Vía using the address number "8". If the building has four entrance doors, the door number "3" could be the "access-level" locator. The 3rd door could, via two staircases "A" and "B", give access to a number of floors, identified by a number "1" to "5" on which a number of dwellings are situated, also identified by numbers "1" to "3"; The "unit level" locator will thus composed of staircase-, floor- and dwelling identification e.g. "staircase A, floor 5, dwelling 1". In total, the three parent-child levels of locators uniquely identify the dwelling.
  
    EXAMPLE 2 In Copenhagen an "access level" locator could identify a specific entrance door in a building on the thoroughfare name "Wildersgade" using the address number "60A" (In Denmark the optional suffix is a part of the address number). The entrance door gives access to a number of floors, e.g, "st", "1", "2", "3", on which two dwellings are situated "tv" and "th". The "unit level" locator will thus be composed by a floor- and a door identifier: "2. th." (2nd floor, door to the right). In total, the two parent-child levels of locators uniquely identify the dwelling.
  
    EXAMPLE 3 In The Netherlands only one level of locators exists. The individual apartment within a large complex, a dwelling, a part of other kinds of buildings (for example an office), a mooring place or a place for the permanent placing of trailers are addressable objects which must have an address. This address is the only level of the locator. This locator could be composed by three attributes the house number, plus optionally an additional house letter, plus optionally an additional housenumber suffix.
  
    EXAMPLE 4 Sometimes the building name is an alternative identifier to the address number e.g. the house located in "Calle Santiago, 15, Elizondo-Baztán, Navarra, Spain" is also identified by the building name "Urtekoetxea""
    * identifier = "Addresses::AddressLocator"
    * tableName = "AD_AddressLocator"
    id INTEGER NOT NULL PRIMARY KEY
    level TEXT NOT NULL CHECK(AD_LocatorLevelValue)
  }
  Attributes <<featureType>> "AD_AddressAreaName" {
    * description = "An address component which represents the name of a geographic area or locality that groups a number of addressable objects for addressing purposes, without being an administrative unit.
  
    NOTE 1 In some countries and regions an address area is a true subdivision of an administrative unit (most often a municipality), so that every address area is fully inside the municipality and so that every part of the municipality is within an address area. In other countries, the concept of address area names is less strict and based on local tradition or specific needs.
  
    NOTE 2 In some situations an address area name is not required to obtain unambiguousness; instead the purpose is to make the complete address more informative and descriptive, adding a well known place name (e.g. of a village or community) to the address. This is particularly useful if the municipality or post code covers a large area.
  
    EXAMPLE 1 In Sweden a "Kommundel" (en: Municipal sub division) is a type of address area names that ensures that street names are unique within the sub division.
  
    EXAMPLE 2 In Spain an "Entidad de población" (en: population entity) has the same function. It is the general address area which depending on its characteristics can be classified as "Entidad Singular" (en: singular entity) or "Entidad Colectiva" (en: collective entity). Moreover, according to the population distribution, these areas can contain one or several "Núcleo de población" (en: population core) and/or "Población diseminada" (en: scattered population).
  
    EXAMPLE 3 In Denmark "Supplerende bynavn" (en: Supplementary town name) is sometimes compulsory to ensure uniqueness of street names within the post code, sometimes it is just useful extra information, that makes the address more informative."
    * identifier = "Addresses::AddressAreaName"
    * tableName = "AD_AddressAreaName"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<lifeCycleInfo>> beginLifespanVersion : DATETIME [0..1]
    <<voidable>>, <<lifeCycleInfo>> endLifespanVersion : DATETIME [0..1]
    <<voidable>> alternativeIdentifier : TEXT [0..1]
    namedPlace_NamedPlace INTEGER
    <<voidable>> status : TEXT [0..1]
    <<voidable>> validFrom : DATETIME [0..1]
    <<voidable>> validTo : DATETIME [0..1]
    inspireId BASE_Identifier [0..1] as ref
  }
  Attributes <<featureType>> "AD_Address" {
    * description = "An identification of the fixed location of property by means of a structured composition of geographic names and identifiers.
  
    NOTE 1 The spatial object, referenced by the address, is defined as the "addressable object". The addressable object is not within the application schema, but it is possible to represent the address' reference to a cadastral parcel or a building through associations. It should, however, be noted that in different countries and regions, different traditions and/or regulations determine which object types should be regarded as addressable objects.
  
    NOTE 2 In most situations the addressable objects are current, real world objects. However, addresses may also reference objects which are planned, under construction or even historical.
  
    NOTE 3 Apart from the identification of the addressable objects (like e.g. buildings), addresses are very often used by a large number of other applications to identify object types e.g. statistics of the citizens living in the building, for taxation of the business entities that occupy the building, and the utility installations.
  
    NOTE 4 For different purposes, the identification of an address can be represented in different ways (see example 3).
  
    EXAMPLE 1 A property can e.g., be a plot of land, building, part of building, way of access or other construction,
  
    EXAMPLE 2 In the Netherlands the primary addressable objects are buildings and dwellings which may include parts of buildings, mooring places or places for the permanent placement of trailers (mobile homes), in the UK it is the lowest level of unit for the delivery of services, in the Czech Republic it is buildings and entrance doors.
  
    EXAMPLE 3 Addresses can be represented differently. In a human readable form an address in Spain and an address in Denmark could be represented like this: "Calle Mayor, 13, Cortijo del Marqués, 41037 Écija, Sevilla, España" or "Wildersgade 60A, st. th, 1408 Copenhagen K., Denmark"."
    * identifier = "Addresses::Address"
    * tableName = "AD_Address"
    id INTEGER NOT NULL PRIMARY KEY
    inspireId INTEGER
    beginLifespanVersion DATETIME
    endLifespanVersion DATETIME
    alternativeIdentifier TEXT
    parentAddress INTEGER
    status TEXT CHECK(AD_StatusValue)
    validFrom DATETIME
    validTo DATETIME
  }
  Attributes <<dataType>> "AD_PartOfName" {
    * description = "A part of the full name resulting from the subdivision of the thoroughfare name into separate, semantic parts, using the same language and script as the full thoroughfare name.
  
    NOTE Each part of the name must be qualified by using the type attribute."
    * identifier = "Addresses::PartOfName"
    * tableName = "AD_PartOfName"
    id INTEGER NOT NULL PRIMARY KEY
    part TEXT NOT NULL
    type TEXT NOT NULL CHECK(AD_PartTypeValue)
  }
  Attributes <<featureType>> "AD_PostalDescriptor" {
    * description = "An address component which represents the identification of a subdivision of addresses and postal delivery points in a country, region or city for postal purposes.
  
    NOTE 1 The postal descriptor is specified by means of a post code and/or names of the associated post office, town or area.
  
    NOTE 2 In some countries post codes are seen as a proper geographic subdivision of the country, in other countries the post code is regarded only as an attribute that characterizes a (usually small) number of adjacent postal delivery points and addresses.
  
    NOTE 3 The postal descriptors are created and developed on the basis of postal requirements (e.g. efficient sorting, logistics, transport and distribution). Consequently, there is not often a tight relationship between the postal areas and administrative units in the same area.
  
    NOTE 4 The structure schema and formats of national postal descriptor systems are different. Sometimes (for example in the UK) the post code itself is the only information required for a valid address; in other situations both the post code and the associated name of post office or town is required. Sometimes there is a simple relationship between the code and the name; in other situations a set of postcodes are associated with a single post office or town.
  
    NOTE 5 In some countries like e.g. The Republic of Ireland, no post code system currently exists, therefore the postal descriptor is only represented by the name of the post town.
  
    EXAMPLE 1 In the UK the post code "EC4M 7DR" is sufficient, as a postal descriptor, while the related town name "London" is informative, but not necessary in the postal address.
  
    EXAMPLE 2 In Sweden all postcodes starting with "80" is related to the postal name "Gävle". Therefore in the postal descriptor "802 74 Gävle", the postcode "802 74" bears all postal necessary information, while the town name "Gävle" is extra information.
  
    EXAMPLE 3 In Denmark, outside the centre of Copenhagen, each postcode has a 1:1 relationship to one post name only: Postcode "6372" relates to the village "Bylderup-Bov".
  
    EXAMPLE 4 In Germany the lowest level of the Postal descriptor (the 5 digit Postleitzahl) often does not fall within an administrative unit (e.g. municipality). The Postleitzahl is handled completely independent from the hierarchal systematic of the addresses. In addition, some "Postleitzahlen" represent not a delivery area, but institutions with a big amount of post."
    * identifier = "Addresses::PostalDescriptor"
    * tableName = "AD_PostalDescriptor"
    id INTEGER NOT NULL PRIMARY KEY
    postCode TEXT
    <<voidable>>, <<lifeCycleInfo>> beginLifespanVersion : DATETIME [0..1]
    <<voidable>>, <<lifeCycleInfo>> endLifespanVersion : DATETIME [0..1]
    <<voidable>> alternativeIdentifier : TEXT [0..1]
    <<voidable>> status : TEXT [0..1]
    <<voidable>> validFrom : DATETIME [0..1]
    <<voidable>> validTo : DATETIME [0..1]
    inspireId BASE_Identifier [0..1] as ref
  }
  Attributes <<dataType>> "AD_AddressRepresentation" {
    * description = "Representation of an address spatial object for use in external application schemas that need to include the basic, address information in a readable way.
  
    NOTE 1 The data type includes the all necessary readable address components as well as the address locator(s), which allows the identification of the address spatial objects, e.g., country, region, municipality, address area, post code, street name and address number. It also includes an optional reference to the full address spatial object.
  
    NOTE 2 The datatype could be used in application schemas that wish to include address information e.g. in a dataset that registers buildings or properties."
    * identifier = "Addresses::AddressRepresentation"
    * tableName = "AD_AddressRepresentation"
    id INTEGER NOT NULL PRIMARY KEY
    locatorDesignators TEXT
    addressFeature INTEGER
    postCode TEXT
  }
  Feature <<dataType>> "AD_GeographicPosition" {
    * description = "The position of a characteristic point which represents the location of the address according to a certain specification, including information on the origin of the position."
    * identifier = "Addresses::GeographicPosition"
    * tableName = "AD_GeographicPosition"
    default BOOLEAN NOT NULL
    geometry POINT NOT NULL
    id INTEGER NOT NULL PRIMARY KEY
    method TEXT CHECK(AD_GeometryMethodValue)
    specification TEXT CHECK(AD_GeometrySpecificationValue)
  }
  Relation "AD_AdminUnitName_name" {
    * profile = "attributes"
    * tableName = "AD_AdminUnitName_name"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AdminUnitName(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AdminUnitName_adminUnit_AdministrativeUnit" {
    * profile = "attributes"
    * relatedReference = "attribute AD_AdminUnitName#adminUnit_AdministrativeUnit"
    * tableName = "AD_AdminUnitName_adminUnit_AdministrativeUnit"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AdminUnitName(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "AD_ThoroughfareName_name" {
    * profile = "attributes"
    * tableName = "AD_ThoroughfareName_name"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_ThoroughfareName(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_ThoroughfareName_transportLink_TransportLink" {
    * profile = "attributes"
    * tableName = "AD_ThoroughfareName_transportLink_TransportLink"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_ThoroughfareName(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "AD_LocatorName_name" {
    * profile = "attributes"
    * tableName = "AD_LocatorName_name"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_LocatorName(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_ThoroughfareNameValue_nameParts" {
    * profile = "attributes"
    * tableName = "AD_ThoroughfareNameValue_nameParts"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_ThoroughfareNameValue(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES AD_PartOfName(id)
  }
  Relation "AD_AddressLocator_designator" {
    * profile = "attributes"
    * tableName = "AD_AddressLocator_designator"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressLocator(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES AD_LocatorDesignator(id)
  }
  Relation "AD_AddressLocator_name" {
    * profile = "attributes"
    * tableName = "AD_AddressLocator_name"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressLocator(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES AD_LocatorName(id)
  }
  Relation "AD_AddressAreaName_name" {
    * profile = "attributes"
    * tableName = "AD_AddressAreaName_name"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressAreaName(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressAreaName_namedPlace_NamedPlace" {
    * profile = "attributes"
    * relatedReference = "attribute AD_AddressAreaName#namedPlace_NamedPlace"
    * tableName = "AD_AddressAreaName_namedPlace_NamedPlace"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressAreaName(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "AD_Address_parentAddress" {
    * profile = "attributes"
    * relatedReference = "attribute AD_Address#parentAddress"
    * tableName = "AD_Address_parentAddress"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_Address(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES AD_Address(id)
  }
  Relation "AD_Address_inspireId" {
    * profile = "attributes"
    * relatedReference = "attribute AD_Address#inspireId"
    * tableName = "AD_Address_inspireId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_Address(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "AD_Address_locator" {
    * profile = "attributes"
    * tableName = "AD_Address_locator"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_Address(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES AD_AddressLocator(id)
  }
  Relation "AD_Address_parcel_CadastralParcel" {
    * profile = "attributes"
    * tableName = "AD_Address_parcel_CadastralParcel"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_Address(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "AD_Address_building_AbstractConstruction" {
    * profile = "attributes"
    * tableName = "AD_Address_building_AbstractConstruction"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_Address(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "AD_Address_position" {
    * profile = "features"
    * tableName = "AD_Address_position"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_Address(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES AD_GeographicPosition(id)
  }
  Relation "AD_PostalDescriptor_postName" {
    * profile = "attributes"
    * tableName = "AD_PostalDescriptor_postName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_PostalDescriptor(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_addressFeature" {
    * profile = "attributes"
    * relatedReference = "attribute AD_AddressRepresentation#addressFeature"
    * tableName = "AD_AddressRepresentation_addressFeature"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES AD_Address(id)
  }
  Relation "AD_AddressRepresentation_adminUnit" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_adminUnit"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_locatorName" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_locatorName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_addressArea" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_addressArea"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_postName" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_postName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_thoroughfare" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_thoroughfare"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_<<missing>>_BuildingAndBuildingUnitInfo" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_<<missing>>_BuildingAndBuildingUnitInfo"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
}
Container <<applicationSchema>> "AdministrativeUnits" {
  * fileName = "AdministrativeUnits"
  Constraint Enum <<codeList>> "AU_AdministrativeHierarchyLevel" {
    * identifier = "AdministrativeUnits::AdministrativeHierarchyLevel"
    1stOrder
    2ndOrder
    3rdOrder
    4thOrder
    5thOrder
    6thOrder
  }
}
Container <<applicationSchema>> "Base Types" {
  * fileName = "Base Types"
  Attributes "BASE_Identifier" {
    * description = "External unique object identifier published by the responsible body, which may be used by external applications to reference the spatial object.
  
    NOTE1 External object identifiers are distinct from thematic object identifiers.
  
    NOTE 2 The voidable version identifier attribute is not part of the unique identifier of a spatial object and may be used to distinguish two versions of the same spatial object.
  
    NOTE 3 The unique identifier will not change during the life-time of a spatial object."
    * identifier = "Base Types::Identifier"
    * tableName = "BASE_Identifier"
    id INTEGER NOT NULL PRIMARY KEY
    localId TEXT NOT NULL
    namespace TEXT NOT NULL
    versionId TEXT
  }
  Metadata "Unknown" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unknown"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Unpopulated" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unpopulated"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
}
Container <<applicationSchema>> "Base Types 2" {
  * fileName = "Base Types 2"
  Attributes "BASE2_SimpleGeographicalName" {
    * tableName = "BASE2_SimpleGeographicalName"
    id INTEGER NOT NULL PRIMARY KEY
    language TEXT
    spelling_text TEXT NOT NULL
  }
}
Package "EA Model" {
  Class "applicationSchema" {}
}

