Container <<applicationSchema>> "Geographical Names" {
  * fileName = "Geographical Names"
  Constraint Enum <<codeList>> "GN_GrammaticalNumberValue" {
    * identifier = "Geographical Names::GrammaticalNumberValue"
    dual
    plural
    singular
  }
  Constraint Enum <<codeList>> "GN_NameStatusValue" {
    * identifier = "Geographical Names::NameStatusValue"
    historical
    official
    other
    standardised
  }
  Constraint Enum <<codeList>> "GN_NativenessValue" {
    * identifier = "Geographical Names::NativenessValue"
    endonym
    exonym
  }
  Attributes <<dataType>> "GN_PronunciationOfName" {
    * description = "Proper, correct or standard (standard within the linguistic community concerned) pronunciation of a name.
  
    SOURCE Adapted from [UNGEGN Manual 2006]."
    * identifier = "Geographical Names::PronunciationOfName"
    * tableName = "GN_PronunciationOfName"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>> pronunciationIPA TEXT
    <<voidable>> pronunciationSoundLink TEXT
  }
  Attributes <<dataType>> "GN_SpellingOfName" {
    * description = "Proper way of writing a name.
  
    SOURCE Adapted from [UNGEGN Manual 2006].
  
    NOTE Proper spelling means the writing of a name with the correct capitalisation and the correct letters and diacritics present in an accepted standard order."
    * identifier = "Geographical Names::SpellingOfName"
    * tableName = "GN_SpellingOfName"
    id INTEGER NOT NULL PRIMARY KEY
    text TEXT NOT NULL
    <<voidable>> script TEXT
    <<voidable>> transliterationScheme TEXT
  }
  Constraint Enum <<codeList>> "GN_NamedPlaceTypeValue" {
    * identifier = "Geographical Names::NamedPlaceTypeValue"
    administrativeUnit
    building
    hydrography
    landcover
    landform
    other
    populatedPlace
    protectedSite
    transportNetwork
  }
  Feature <<featureType>> "GN_NamedPlace" {
    * description = "Any real world entity referred to by one or several proper nouns."
    * identifier = "Geographical Names::NamedPlace"
    * tableName = "GN_NamedPlace"
    geometry GEOMETRY NOT NULL
    id INTEGER NOT NULL PRIMARY KEY
    leastDetailedViewingResolution_equivalentScale_denominator INTEGER
    mostDetailedViewingResolution_equivalentScale_denominator INTEGER
    <<voidable>>, <<lifeCycleInfo>> beginLifespanVersion DATETIME
    <<voidable>>, <<lifeCycleInfo>> endLifespanVersion DATETIME
    <<voidable>>, <<array>> types TEXT
    <<reference>> inspireId INTEGER
    <<voidable>> leastDetailedViewingResolution_distance TEXT
    <<voidable>> leastDetailedViewingResolution_distance_uom TEXT CHECK(GML_UomIdentifier)
    <<voidable>> mostDetailedViewingResolution_distance TEXT
    <<voidable>> mostDetailedViewingResolution_distance_uom TEXT CHECK(GML_UomIdentifier)
  }
  Constraint Enum <<codeList>> "GN_GrammaticalGenderValue" {
    * identifier = "Geographical Names::GrammaticalGenderValue"
    common
    feminine
    masculine
    neuter
  }
  Attributes <<dataType>> "GN_GeographicalName" {
    * description = "Proper noun applied to a real world entity."
    * identifier = "Geographical Names::GeographicalName"
    * tableName = "GN_GeographicalName"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>> grammaticalGender TEXT CHECK(GN_GrammaticalGenderValue)
    <<voidable>> grammaticalNumber TEXT CHECK(GN_GrammaticalNumberValue)
    <<voidable>> language TEXT
    <<voidable>> nameStatus TEXT CHECK(GN_NameStatusValue)
    <<voidable>> nativeness TEXT CHECK(GN_NativenessValue)
    <<voidable>> pronunciation_pronunciationIPA TEXT
    <<voidable>> pronunciation_pronunciationSoundLink TEXT
    <<voidable>> sourceOfName TEXT
  }
  Relation "GN_NamedPlace_inspireId" {
    * profile = "attributes"
    * relatedReference = "attribute GN_NamedPlace#inspireId"
    * tableName = "GN_NamedPlace_inspireId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES GN_NamedPlace(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation <<voidable>> "GN_NamedPlace_localType" {
    * profile = "attributes"
    * tableName = "GN_NamedPlace_localType"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES GN_NamedPlace(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleLocalisedCharacterString(id)
  }
  Relation "GN_NamedPlace_name" {
    * profile = "attributes"
    * tableName = "GN_NamedPlace_name"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES GN_NamedPlace(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES GN_GeographicalName(id)
  }
  Relation <<voidable>> "GN_NamedPlace_relatedSpatialObject" {
    * profile = "attributes"
    * tableName = "GN_NamedPlace_relatedSpatialObject"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES GN_NamedPlace(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation "GN_GeographicalName_spelling" {
    * profile = "attributes"
    * tableName = "GN_GeographicalName_spelling"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES GN_GeographicalName(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES GN_SpellingOfName(id)
  }
}
Container <<applicationSchema>> "Base Types 2" {
  * fileName = "Base Types 2"
  Constraint Enum <<codeList>> "BASE2_Locale" {}
  Attributes <<type>> "BASE2_SimpleLocalisedCharacterString" {
    * tableName = "BASE2_SimpleLocalisedCharacterString"
    id INTEGER NOT NULL PRIMARY KEY
    locale TEXT NOT NULL CHECK(BASE2_Locale)
    value TEXT NOT NULL
  }
}
Container <<applicationSchema>> "Base Types" {
  * fileName = "Base Types"
  Attributes <<dataType>> "BASE_Identifier" {
    * description = "External unique object identifier published by the responsible body, which may be used by external applications to reference the spatial object.
  
    NOTE1 External object identifiers are distinct from thematic object identifiers.
  
    NOTE 2 The voidable version identifier attribute is not part of the unique identifier of a spatial object and may be used to distinguish two versions of the same spatial object.
  
    NOTE 3 The unique identifier will not change during the life-time of a spatial object."
    * identifier = "Base Types::Identifier"
    * tableName = "BASE_Identifier"
    id INTEGER NOT NULL PRIMARY KEY
    localId TEXT NOT NULL
    namespace TEXT NOT NULL
    <<lifeCycleInfo>>, <<voidable>> versionId TEXT
  }
  Metadata "Unknown" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unknown"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Unpopulated" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unpopulated"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
}
Package "EA Model" {
  Class "applicationSchema" {}
}

Container "Units of Measure" {
  * fileName = "Units of Measure"
  Constraint Enum "GML_UomIdentifier" {}
}
