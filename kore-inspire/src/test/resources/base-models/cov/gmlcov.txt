Container <<applicationSchema>> "Coverages (Domain and Range)" {
  * fileName = "Coverages (Domain and Range)"
  Attributes <<featureType>> "GMLCOV_RectifiedGridCoverage" {
    * description = "Coverage whose domain consists of a rectified grid
  
    A rectified grid is a grid for which there is an affine transformation between the grid coordinates and the coordinates of a coordinate reference system.
  
    NOTE This type can be used for both discrete and continuous coverages."
    * identifier = "Coverages (Domain and Range)::RectifiedGridCoverage"
    * tableName = "GMLCOV_RectifiedGridCoverage"
    coverageFunction_ruleDefinition TEXT
    coverageFunction_ruleReference TEXT
    id INTEGER NOT NULL PRIMARY KEY
    coverageFunction_gridFunction GMLCOV_GridFunction [0..1] as ref
    metadata _Any [0..*] as ref
    rangeSet _Any [0..*] as ref
    rangeType _RecordType as ref
  }
  Attributes <<featureType>> "GMLCOV_ReferenceableGridCoverage" {
    * description = "Coverage whose domain consists of a referenceable grid
  
    A referencable grid is a grid associated with a transformation that can be used to convert grid coordinate values to values of coordinates referenced to a coordinate reference system.
  
    NOTE This type can be used for both discrete and continuous coverages."
    * identifier = "Coverages (Domain and Range)::ReferenceableGridCoverage"
    * tableName = "GMLCOV_ReferenceableGridCoverage"
    coverageFunction_ruleDefinition TEXT
    coverageFunction_ruleReference TEXT
    id INTEGER NOT NULL PRIMARY KEY
    coverageFunction_gridFunction GMLCOV_GridFunction [0..1] as ref
    metadata _Any [0..*] as ref
    rangeSet _Any [0..*] as ref
    rangeType _RecordType as ref
  }
  Class <<union>> "CoverageFunction" {
    ruleDefinition : TEXT
    ruleReference : TEXT
    gridFunction GMLCOV_GridFunction as ref
  }
  Abstract Class <<featureType>> "CoverageByDomainAndRange" {
    coverageFunction_ruleDefinition TEXT
    coverageFunction_ruleReference TEXT
    coverageFunction_gridFunction GMLCOV_GridFunction [0..1] as ref
    metadata _Any [0..*] as ref
    rangeSet _Any [0..*] as ref
    rangeType _RecordType as ref
  }
  Attributes <<dataType>> "GMLCOV_GridFunction" {
    * description = "An explicit mapping rule for grid geometries"
    * identifier = "Coverages (Domain and Range)::GridFunction"
    * tableName = "GMLCOV_GridFunction"
    id INTEGER NOT NULL PRIMARY KEY
    sequenceRule_scanDirection <<missing>>
    sequenceRule_type TEXT CHECK(CIS_CV_SequenceType) DEFAULT 'linear'
    <<array>> startPoints TEXT
  }
}
Container "Quadrilateral Grid" {
  * fileName = "Quadrilateral Grid"
  Constraint Enum <<codeList>> "CIS_CV_SequenceType" {
    * identifier = "Quadrilateral Grid::CV_SequenceType"
    CantorDiagonal
    Hilbert
    Morton
    boustrophedonic
    linear
    spiral
  }
}
Container "Records and Class Metadata" {
  * fileName = "Records and Class Metadata"
  Attributes <<type>>, <<type>> "_Any" {
    * description = "<UsedBy>
  
    <NameSpace>ISO 19103 Conceptual Schema Language</NameSpace>
  
    <Class>Record</Class>
  
    <Package>Records and Class Metadata</Package>
  
    <Operation>locate</Operation>
  
    <Parameter>Return</Parameter>
  
    <Type>Any</Type>
  
    <UsedBy>"
    * identifier = "Records and Class Metadata::Any"
    * tableName = "_Any"
    id INTEGER NOT NULL PRIMARY KEY
  }
  Attributes <<type>>, <<type>> "_Type" {
    * description = "Type is used here for as a generic concept for any metalanguage description of an object class."
    * identifier = "Records and Class Metadata::Type"
    * tableName = "_Type"
    id INTEGER NOT NULL PRIMARY KEY
    typeName_aName TEXT NOT NULL
    schema Schema [0..*] as ref
  }
  Attributes <<type>>, <<type>> "_RecordType" {
    * description = "A RecordType is a look up mechanism that associates AttributeNames to TypeNames. AttributeNames are locally mapped. TypeNames are most often either primitives, or other types in the same schema as this record. Because the RecordType can control the structure of a set of Records, it is essentially a metaclass for that set of records view as a class.
  
    A RecordType is a NameSpace for its included attributeTypes."
    * identifier = "Records and Class Metadata::RecordType"
    * tableName = "_RecordType"
    id INTEGER NOT NULL PRIMARY KEY
    typeName_aName TEXT NOT NULL
    <<reference>> memberType INTEGER
    record Record [0..*] as ref
    schema Schema [0..*] as ref
  }
  Relation "_RecordType_memberType" {
    * profile = "attributes"
    * relatedReference = "attribute _RecordType#memberType"
    * tableName = "_RecordType_memberType"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES _RecordType(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES _Type(id)
  }
}
Package <<applicationSchema>> "Base Types" {
  Metadata "Unknown" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unknown"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Unpopulated" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unpopulated"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
}
Package "EA Model" {
  Class "applicationSchema" {}
}

