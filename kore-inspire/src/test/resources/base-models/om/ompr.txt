Container <<applicationSchema>> "Processes" {
  * fileName = "Processes"
  Attributes <<featureType>> "OMPR_Process" {
    * description = "Description of an observation process"
    * identifier = "Processes::Process"
    * tableName = "OMPR_Process"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<reference>> inspireId INTEGER
    <<voidable>> name TEXT
    <<voidable>> type TEXT
    generatedObservation OM_Observation [0..*] as ref
  }
  Attributes <<dataType>> "OMPR_ProcessParameter" {
    * description = "Description of the given parameter"
    * identifier = "Processes::ProcessParameter"
    * tableName = "OMPR_ProcessParameter"
    description TEXT
    id INTEGER NOT NULL PRIMARY KEY
    name TEXT NOT NULL CHECK(OMPR_ProcessParameterNameValue)
  }
  Constraint Enum <<codeList>> "OMPR_ProcessParameterNameValue" {
    * identifier = "Processes::ProcessParameterNameValue"
  }
  Relation <<voidable>> "OMPR_Process_inspireId" {
    * profile = "attributes"
    * relatedReference = "attribute OMPR_Process#inspireId"
    * tableName = "OMPR_Process_inspireId"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES OMPR_Process(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
  Relation <<voidable>> "OMPR_Process_documentation" {
    * profile = "attributes"
    * tableName = "OMPR_Process_documentation"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES OMPR_Process(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleCitation(id)
  }
  Relation <<voidable>> "OMPR_Process_processParameter" {
    * profile = "attributes"
    * tableName = "OMPR_Process_processParameter"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES OMPR_Process(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES OMPR_ProcessParameter(id)
  }
  Relation <<voidable>> "OMPR_Process_responsibleParty" {
    * profile = "attributes"
    * tableName = "OMPR_Process_responsibleParty"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES OMPR_Process(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_RelatedParty(id)
  }
}
Container <<applicationSchema>> "Base Types 2" {
  * fileName = "Base Types 2"
  Attributes <<dataType>> "BASE2_Contact" {
    * description = "Communication channels by which it is possible to gain access to someone or something."
    * identifier = "Base Types 2::Contact"
    * tableName = "BASE2_Contact"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<reference>> address INTEGER
    <<voidable>>, <<array>> telephoneFacsimiles TEXT
    <<voidable>>, <<array>> telephoneVoices TEXT
    <<voidable>> electronicMailAddress TEXT
    <<voidable>> website TEXT
  }
  Constraint Enum <<codeList>> "BASE2_PartyRoleValue" {
    * identifier = "Base Types 2::PartyRoleValue"
  }
  Attributes <<dataType>> "BASE2_RelatedParty" {
    * description = "An organisation or a person with a role related to a resource.
  
    NOTE 1 A party, typically an individual person, acting as a general point of contact for a resource can be specified without providing any particular role."
    * identifier = "Base Types 2::RelatedParty"
    * tableName = "BASE2_RelatedParty"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<reference>> contact INTEGER
    <<voidable>>, <<array>> roles TEXT
  }
  Constraint Enum <<enumeration>> "BASE2_SimpleCitationType" {
    CI_Citation
    DocumentCitation
    LegislationCitation
  }
  Attributes <<dataType>> "BASE2_SimpleCitation" {
    * tableName = "BASE2_SimpleCitation"
    date DATE
    id INTEGER NOT NULL PRIMARY KEY
    level LegislationLevelValue
    link TEXT
    name TEXT NOT NULL
    type TEXT NOT NULL CHECK(BASE2_SimpleCitationType)
  }
  Attributes <<dataType>> "BASE2_SimpleGeographicalName" {
    * tableName = "BASE2_SimpleGeographicalName"
    id INTEGER NOT NULL PRIMARY KEY
    language TEXT
    spelling_text TEXT NOT NULL
  }
  Constraint Enum <<codeList>> "BASE2_Locale" {}
  Attributes <<type>> "BASE2_SimpleLocalisedCharacterString" {
    * tableName = "BASE2_SimpleLocalisedCharacterString"
    id INTEGER NOT NULL PRIMARY KEY
    locale TEXT NOT NULL CHECK(BASE2_Locale)
    value TEXT NOT NULL
  }
  Relation <<voidable>> "BASE2_RelatedParty_individualName" {
    * profile = "attributes"
    * tableName = "BASE2_RelatedParty_individualName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_RelatedParty(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleLocalisedCharacterString(id)
  }
  Relation <<voidable>> "BASE2_RelatedParty_organisationName" {
    * profile = "attributes"
    * tableName = "BASE2_RelatedParty_organisationName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_RelatedParty(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleLocalisedCharacterString(id)
  }
  Relation <<voidable>> "BASE2_RelatedParty_positionName" {
    * profile = "attributes"
    * tableName = "BASE2_RelatedParty_positionName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_RelatedParty(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleLocalisedCharacterString(id)
  }
  Relation <<voidable>> "BASE2_RelatedParty_contact" {
    * profile = "attributes"
    * relatedReference = "attribute BASE2_RelatedParty#contact"
    * tableName = "BASE2_RelatedParty_contact"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_RelatedParty(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_Contact(id)
  }
  Relation <<voidable>> "BASE2_Contact_address" {
    * profile = "attributes"
    * relatedReference = "attribute BASE2_Contact#address"
    * tableName = "BASE2_Contact_address"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_Contact(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES AD_AddressRepresentation(id)
  }
  Relation <<voidable>> "BASE2_Contact_contactInstructions" {
    * profile = "attributes"
    * tableName = "BASE2_Contact_contactInstructions"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_Contact(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleLocalisedCharacterString(id)
  }
  Relation <<voidable>> "BASE2_Contact_hoursOfService" {
    * profile = "attributes"
    * tableName = "BASE2_Contact_hoursOfService"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES BASE2_Contact(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleLocalisedCharacterString(id)
  }
}
Container <<applicationSchema>> "Addresses" {
  * fileName = "Addresses"
  Attributes <<dataType>> "AD_AddressRepresentation" {
    * description = "Representation of an address spatial object for use in external application schemas that need to include the basic, address information in a readable way.
  
    NOTE 1 The data type includes the all necessary readable address components as well as the address locator(s), which allows the identification of the address spatial objects, e.g., country, region, municipality, address area, post code, street name and address number. It also includes an optional reference to the full address spatial object.
  
    NOTE 2 The datatype could be used in application schemas that wish to include address information e.g. in a dataset that registers buildings or properties."
    * identifier = "Addresses::AddressRepresentation"
    * tableName = "AD_AddressRepresentation"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>>, <<reference>> addressFeature_Address INTEGER
    <<array>> locatorDesignators TEXT
    <<voidable>> postCode TEXT
  }
  Relation "AD_AddressRepresentation_adminUnit" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_adminUnit"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation "AD_AddressRepresentation_locatorName" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_locatorName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation <<voidable>> "AD_AddressRepresentation_addressArea" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_addressArea"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation <<voidable>> "AD_AddressRepresentation_postName" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_postName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation <<voidable>> "AD_AddressRepresentation_thoroughfare" {
    * profile = "attributes"
    * tableName = "AD_AddressRepresentation_thoroughfare"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
  Relation <<voidable>> "AD_AddressRepresentation_addressFeature_Address" {
    * profile = "attributes"
    * relatedReference = "attribute AD_AddressRepresentation#addressFeature_Address"
    * tableName = "AD_AddressRepresentation_addressFeature_Address"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES AD_AddressRepresentation(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE_Identifier(id)
  }
}
Container <<applicationSchema>> "Base Types" {
  * fileName = "Base Types"
  Attributes <<dataType>> "BASE_Identifier" {
    * description = "External unique object identifier published by the responsible body, which may be used by external applications to reference the spatial object.
  
    NOTE1 External object identifiers are distinct from thematic object identifiers.
  
    NOTE 2 The voidable version identifier attribute is not part of the unique identifier of a spatial object and may be used to distinguish two versions of the same spatial object.
  
    NOTE 3 The unique identifier will not change during the life-time of a spatial object."
    * identifier = "Base Types::Identifier"
    * tableName = "BASE_Identifier"
    id INTEGER NOT NULL PRIMARY KEY
    localId TEXT NOT NULL
    namespace TEXT NOT NULL
    <<lifeCycleInfo>>, <<voidable>> versionId TEXT
  }
  Metadata "Unknown" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unknown"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Unpopulated" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unpopulated"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
}
Package "EA Model" {
  Class "applicationSchema" {}
  Datatype LegislationLevelValue
  
}

