Container <<applicationSchema>> "Network" {
  * fileName = "Network"
  Class <<featureType>> "Node" {
    geometry : POINT
    <<lifeCycleInfo>>, <<voidable>> beginLifespanVersion : DATETIME [0..1]
    <<lifeCycleInfo>>, <<voidable>> endLifespanVersion : DATETIME [0..1]
    inspireId BASE_Identifier [0..1] as ref
    <<voidable>> inNetwork NET_Network [0..*] as ref
    <<voidable>> spokeEnd Link [0..*] as ref
    <<voidable>> spokeStart Link [0..*] as ref
  }
  Class <<featureType>> "NetworkArea" {
    geometry : SURFACE
    <<lifeCycleInfo>>, <<voidable>> beginLifespanVersion : DATETIME [0..1]
    <<lifeCycleInfo>>, <<voidable>> endLifespanVersion : DATETIME [0..1]
    inspireId BASE_Identifier [0..1] as ref
    <<voidable>> inNetwork NET_Network [0..*] as ref
  }
  Attributes <<featureType>> "NET_NetworkConnection" {
    * description = "Represents a logical connection between two or more network elements in different networks.
  
    In the case where the networks are in different spatial data sets, a network connection object may exist in both data sets."
    * identifier = "Network::NetworkConnection"
    * tableName = "NET_NetworkConnection"
    id INTEGER NOT NULL PRIMARY KEY
    <<lifeCycleInfo>>, <<voidable>> beginLifespanVersion : DATETIME [0..1]
    <<lifeCycleInfo>>, <<voidable>> endLifespanVersion : DATETIME [0..1]
    <<voidable>> type TEXT CHECK(NET_ConnectionTypeValue)
    inspireId BASE_Identifier [0..1] as ref
    <<voidable>> inNetwork NET_Network [0..*] as ref
  }
  Attributes <<dataType>> "NET_LinkReference" {
    * description = "A network reference to a linear network element."
    * identifier = "Network::LinkReference"
    * tableName = "NET_LinkReference"
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>> applicableDirection TEXT CHECK(NET_LinkDirectionValue)
    involves TrafficRelatedEvent [0..*] as ref
  }
  Class <<featureType>> "LinkSequence" {
    <<lifeCycleInfo>>, <<voidable>> beginLifespanVersion : DATETIME [0..1]
    <<lifeCycleInfo>>, <<voidable>> endLifespanVersion : DATETIME [0..1]
    inspireId BASE_Identifier [0..1] as ref
    link NET_DirectedLink [1..*] as ref
    <<voidable>> inNetwork NET_Network [0..*] as ref
  }
  Attributes <<dataType>> "NET_SimpleLinearReference" {
    * description = "A network reference that is restricted to part of a linear network element. The part is the part of the network element between fromPosition and toPosition."
    * identifier = "Network::SimpleLinearReference"
    * tableName = "NET_SimpleLinearReference"
    fromPosition TEXT NOT NULL
    fromPosition_uom TEXT NOT NULL CHECK(GML_UomIdentifier)
    id INTEGER NOT NULL PRIMARY KEY
    toPosition TEXT NOT NULL
    toPosition_uom TEXT NOT NULL CHECK(GML_UomIdentifier)
    <<voidable>> applicableDirection TEXT CHECK(NET_LinkDirectionValue)
    <<voidable>> offset TEXT
    <<voidable>> offset_uom TEXT CHECK(GML_UomIdentifier)
    involves TrafficRelatedEvent [0..*] as ref
  }
  Attributes <<dataType>> "NET_DirectedLink" {
    * description = "A link either in its positive or negative direction."
    * identifier = "Network::DirectedLink"
    * tableName = "NET_DirectedLink"
    direction TEXT NOT NULL CHECK(GML_Sign)
    id INTEGER NOT NULL PRIMARY KEY
  }
  Attributes <<dataType>> "NET_SimplePointReference" {
    * description = "A network reference that is restricted to a point on a linear network element. The point is the location on the network element at the position atPosition along the network."
    * identifier = "Network::SimplePointReference"
    * tableName = "NET_SimplePointReference"
    atPosition TEXT NOT NULL
    atPosition_uom TEXT NOT NULL CHECK(GML_UomIdentifier)
    id INTEGER NOT NULL PRIMARY KEY
    <<voidable>> applicableDirection TEXT CHECK(NET_LinkDirectionValue)
    <<voidable>> offset TEXT
    <<voidable>> offset_uom TEXT CHECK(GML_UomIdentifier)
    involves TrafficRelatedEvent [0..*] as ref
  }
  Class <<featureType>> "GeneralisedLink" {
    <<lifeCycleInfo>>, <<voidable>> beginLifespanVersion : DATETIME [0..1]
    <<lifeCycleInfo>>, <<voidable>> endLifespanVersion : DATETIME [0..1]
    inspireId BASE_Identifier [0..1] as ref
    <<voidable>> inNetwork NET_Network [0..*] as ref
  }
  Class <<featureType>> "NetworkProperty" {
    <<voidable>>, <<lifeCycleInfo>> beginLifespanVersion : DATETIME [0..1]
    <<voidable>>, <<lifeCycleInfo>> endLifespanVersion : DATETIME [0..1]
    inspireId BASE_Identifier [0..1] as ref
    <<voidable>> networkRef NET_NetworkReference [0..*] as ref
  }
  Constraint Enum <<codeList>> "NET_LinkDirectionValue" {
    * identifier = "Network::LinkDirectionValue"
    bothDirections
    inDirection
    inOppositeDirection
  }
  Constraint Enum <<codeList>> "NET_ConnectionTypeValue" {
    * identifier = "Network::ConnectionTypeValue"
    crossBorderConnected
    crossBorderIdentical
    intermodal
  }
  Attributes <<featureType>> "NET_CrossReference" {
    * description = "Represents a reference between two elements in the same network.
  
    The cross reference may represent the case where two elements are different representations of the same spatial object."
    * identifier = "Network::CrossReference"
    * tableName = "NET_CrossReference"
    id INTEGER NOT NULL PRIMARY KEY
  }
  Attributes <<featureType>> "NET_GradeSeparatedCrossing" {
    * description = "Indicator which of two or more intersecting elements is/are below and which is/are above, to be used if elevation coordinates are not present or cannot be trusted.
  
    NOTE 1 In most cases, the number of elements will be two.
  
    NOTE 2 In the normal case this is when elements intersect in the x/y-plane when the z coordinate is not present or is not accurate enough."
    * identifier = "Network::GradeSeparatedCrossing"
    * tableName = "NET_GradeSeparatedCrossing"
    id INTEGER NOT NULL PRIMARY KEY
    <<lifeCycleInfo>>, <<voidable>> beginLifespanVersion : DATETIME [0..1]
    <<lifeCycleInfo>>, <<voidable>> endLifespanVersion : DATETIME [0..1]
    inspireId BASE_Identifier [0..1] as ref
    <<voidable>> inNetwork NET_Network [0..*] as ref
  }
  Class <<featureType>> "Link" {
    centrelineGeometry : CURVE
    fictitious : BOOLEAN
    <<lifeCycleInfo>>, <<voidable>> beginLifespanVersion : DATETIME [0..1]
    <<lifeCycleInfo>>, <<voidable>> endLifespanVersion : DATETIME [0..1]
    endNode Node [0..1] as ref
    inspireId BASE_Identifier [0..1] as ref
    startNode Node [0..1] as ref
    <<voidable>> inNetwork NET_Network [0..*] as ref
  }
  Class <<featureType>> "NetworkElement" {
    <<lifeCycleInfo>>, <<voidable>> beginLifespanVersion : DATETIME [0..1]
    <<lifeCycleInfo>>, <<voidable>> endLifespanVersion : DATETIME [0..1]
    inspireId BASE_Identifier [0..1] as ref
    <<voidable>> inNetwork NET_Network [0..*] as ref
  }
  Attributes <<dataType>> "NET_NetworkReference" {
    * description = "A reference to a network element."
    * identifier = "Network::NetworkReference"
    * tableName = "NET_NetworkReference"
    id INTEGER NOT NULL PRIMARY KEY
    involves TrafficRelatedEvent [0..*] as ref
  }
  Class <<featureType>> "LinkSet" {
    <<lifeCycleInfo>>, <<voidable>> beginLifespanVersion : DATETIME [0..1]
    <<lifeCycleInfo>>, <<voidable>> endLifespanVersion : DATETIME [0..1]
    inspireId BASE_Identifier [0..1] as ref
    <<voidable>> inNetwork NET_Network [0..*] as ref
  }
  Attributes <<featureType>> "NET_Network" {
    * description = "A network is a collection of network elements.
  
    The reason for collecting certain elements in a certain network may vary (e.g. connected elements for the same mode of transport)"
    * identifier = "Network::Network"
    * tableName = "NET_Network"
    id INTEGER NOT NULL PRIMARY KEY
    elements NetworkElement [0..*] as ref
  }
  Relation "NET_Network_geographicalName" {
    * profile = "attributes"
    * tableName = "NET_Network_geographicalName"
    base_id INTEGER NOT NULL FOREIGN KEY (base_id) REFERENCES NET_Network(id)
    related_id INTEGER NOT NULL FOREIGN KEY (related_id) REFERENCES BASE2_SimpleGeographicalName(id)
  }
}
Container "basicTypes" {
  * fileName = "basicTypes"
  Constraint Enum <<enumeration>>, <<enumeration>> "GML_Sign" {
    * identifier = "basicTypes::Sign"
    "+"
    "-"
  }
}
Container <<applicationSchema>> "Base Types 2" {
  * fileName = "Base Types 2"
  Constraint Enum <<enumeration>> "BASE2_SimpleCitationType" {
    CI_Citation
    DocumentCitation
    LegislationCitation
  }
  Attributes <<dataType>> "BASE2_SimpleGeographicalName" {
    * tableName = "BASE2_SimpleGeographicalName"
    id INTEGER NOT NULL PRIMARY KEY
    language TEXT
    spelling_text TEXT NOT NULL
  }
}
Container <<applicationSchema>> "Base Types" {
  * fileName = "Base Types"
  Attributes <<dataType>> "BASE_Identifier" {
    * description = "External unique object identifier published by the responsible body, which may be used by external applications to reference the spatial object.
  
    NOTE1 External object identifiers are distinct from thematic object identifiers.
  
    NOTE 2 The voidable version identifier attribute is not part of the unique identifier of a spatial object and may be used to distinguish two versions of the same spatial object.
  
    NOTE 3 The unique identifier will not change during the life-time of a spatial object."
    * identifier = "Base Types::Identifier"
    * tableName = "BASE_Identifier"
    id INTEGER NOT NULL PRIMARY KEY
    localId TEXT NOT NULL
    namespace TEXT NOT NULL
    <<lifeCycleInfo>>, <<voidable>> versionId TEXT
  }
  Metadata "Unknown" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unknown"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Unpopulated" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Unpopulated"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attribute"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
  Metadata "Withheld" {
    * metadata = "http://inspire.ec.europa.eu/codelist/VoidReasonValue/Withheld"
    * mimeType = "text/plain"
    * scope = "attributeType"
    * standardUri = "http://www.isotc211.org/2005/gmd"
  }
}
Package "EA Model" {
  Class "applicationSchema" {}
}

Container "Units of Measure" {
  * fileName = "Units of Measure"
  Constraint Enum "GML_UomIdentifier" {}
}
